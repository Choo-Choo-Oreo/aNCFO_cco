#	Example:
# 
#	example_dynamic_modifier = {
#		icon = "GFX_idea_unknown" # optional, will show up in guis if icon is specified
#		enable = { always = yes } #optional, the modifier won't apply if not enabled
#		remove_trigger = { always = no } #optional, will remove the modifier if true
#
#		# list of modifiers
#		fuel_cost = 321
#		max_fuel = var_max_fuel # will be taken from a variable
#	}
#
#
#	In a script file:
#
#	effect = {
#		add_dynamic_modifier = {
#			modifier = example_dynamic_modifier
#			scope = GER # optional, if you specify this your dynamic modifier scoped to this scope (root is the effect scope)
#			days = 14 # optional, will be removed after this many days passes
#		}
#	}
#
#	can be added to countries, states or unit leaders
#	will only updated daily, unless forced by force_update_dynamic_modifier effect

	# research workaround to apply the pre 1.6 research speed function by Yard1
	# before 1.6, research speed was linear, and had the equation:
	#
	# time = (cost-(cost/100)*x)/(speed)
	#
	# the research speed modifier was applied to the tech cost, so if we had a tech that had a base cost of 100 days, a research speed modifier of +50% would bring that to 50 days
	# after 1.6, the equation changed to:
	#
	# time = (cost)/(speed-(speed/100)*x)
	#
	# now the research speed modifier was applied to the speed itself (aka daily research gain). Which meant that, if we had a +50% research speed modifier, the 100 days tech would take 66.67 days
	# this modifier adds just the right amount of the research speed modifier to make the new equation give the same results as the old one. Without it, we would not be able to have
	# very large maluses, as the research would take an infinite amount of days
	
	BM_AI_production_efficiency_fix = {
		enable = { is_ai = yes }

		#icon = GFX_modifiers_sabotaged_resource
		
		production_factory_start_efficiency_factor = BM_AI_production_efficiency_fix_var
	}
