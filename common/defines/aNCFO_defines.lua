-- aNCFO Defines
	-- NGame
		NDefines.NGame.START_DATE = "1724.1.1.12"
		NDefines.NGame.END_DATE = "1936.1.1.1"
		NDefines.NGame.MAP_SCALE_PIXEL_TO_KM = 7.8254
		NDefines.NGame.HANDS_OFF_START_TAG = "LLA"
		-- Optimization
			NDefines.NGame.LAG_DAYS_FOR_LOWER_SPEED = 100
			NDefines.NGame.LAG_DAYS_FOR_PAUSE = 60
			NDefines.NGame.COMBAT_LOG_MAX_MONTHS = 36
			NDefines.NGame.GAME_SPEED_SECONDS = { 0.35, 0.15, 0.1, 0.035, 0.0 }

	-- NGeography
		NDefines.NGeography.MEDITERRANEAN_SEA_REGIONS = { 25, 26, 27, 28, 29, 30, 32, 34 }

	-- NDiplomacy
		NDefines.NDiplomacy.TENSION_STATE_VALUE = 2.0				-- Tension value gained by annexing one state
		NDefines.NDiplomacy.TENSION_CIVIL_WAR_IMPACT = 0.2			-- civil war multiplier on tension.
		NDefines.NDiplomacy.TENSION_NO_CB_WAR = 6.75				-- Amount of tension generated by a no-CB wargoal -- Was 7.0 changed to 3.5
		NDefines.NDiplomacy.TENSION_CB_WAR = 7.0				-- Amount of tension generated by a war with a CB -- Was 10.0 changed to 7.0
		NDefines.NDiplomacy.TENSION_ANNEX_NO_CLAIM = 2.75			-- Amount of tension generated by annexing a state you don't have claims on -- Was 7.0 changed to 3.5
		NDefines.NDiplomacy.TENSION_ANNEX_CLAIM = 0.5				-- Amount of tension generated by annexing a state you DO have claims on
		NDefines.NDiplomacy.TENSION_ANNEX_CORE = 0				-- Amount of tension generated by annexing a state that is your core
		NDefines.NDiplomacy.TENSION_PUPPET = 1.25				-- Amount of tension generated by puppeting (per state)
		NDefines.NDiplomacy.TENSION_FORCE_GOVERNMENT = 0.75                	-- Amount of tension generated by forcing government (per state)
		NDefines.NDiplomacy.TENSION_VOLUNTEER_FORCE_DIVISION = 0.2		-- Amount of tension generated for each sent division
		NDefines.NDiplomacy.TENSION_DECAY_DAILY = 0.015				-- Each day tension decays this much for Threat sources which are no longer relevant. Replaces TENSION_DECAY as of 1.12.0 -- Was 0.005 changed to 0.025
		NDefines.NDiplomacy.TENSION_SIZE_FACTOR = 1.0				-- All action tension values are multiplied by this value
		NDefines.NDiplomacy.TENSION_TIME_SCALE_START_DATE = "1724.1.1.12"	-- Starting at this date, the tension values will be scaled down (will be equal to 1 before that)
		NDefines.NDiplomacy.TENSION_TIME_SCALE_MONTHLY_FACTOR = -0.005		-- Timed tension scale will be modified by this amount starting with TENSION_TIME_SCALE_START_DATE
		NDefines.NDiplomacy.TENSION_TIME_SCALE_MIN = 0.25			-- Timed tension scale won't decrease under this value
		NDefines.NDiplomacy.TENSION_GUARANTEE = -5.0
		NDefines.NDiplomacy.TENSION_FACTION_JOIN = 4.0
		NDefines.NDiplomacy.TENSION_JOIN_ATTACKER = 2.5				-- scale of the amount of tension added when country joins attacker side -- Was 2 changed to 3
		NDefines.NDiplomacy.TENSION_PEACE_FACTOR = 0.334			-- scale of the amount of tension (from war declaration) reduced when peace is completed. -- Was 0.25 changed to 0.334
		NDefines.NDiplomacy.TENSION_LIBERATE = -1.25				-- Amount of tension generated by liberating a country. -- Was 1.0 changed to 1.25
		NDefines.NDiplomacy.TENSION_TAKE_ONE_CAPITAL_SHIP = 0.25		-- Amount of tension generated by 1 take navy peace action
		NDefines.NDiplomacy.TENSION_DEMILITARIZE_ZONE = 0.10			-- Amount of tension generated by stacking demilitarize zone on 1 state, multiplied with the state base threat -- Was 0.25 changed to 0.10
		NDefines.NDiplomacy.TENSION_WAR_REPARATION = 0.25			-- Amount of tension generated by stacking war reparation on 1 state, multiplied with the state base threat
		NDefines.NDiplomacy.TENSION_RESOURCE_RIGHTS = 0.25			-- Amount of tension generated by stacking resource rights on 1 state, multiplied with the state base threat
		NDefines.NDiplomacy.TENSION_DISMANTLE_INDUSTRY = 0.10			-- Amount of tension generated by stacking dismantle military industry on 1 state, multiplied with the state base threat -- Was 0.25 changed to 0.10
		NDefines.NDiplomacy.TENSION_CAPITULATE = 0.20				-- Scale of the amount of tension created by a countries capitulation. -- Was 0.40 changed to 0.20
		-- Optimization
			--NDefines.NDiplomacy.PEACE_SCORE_PER_PASS = 1.0
			NDefines.NDiplomacy.DIPLOMACY_HOURS_BETWEEN_REQUESTS = 12
			NDefines.NDiplomacy.GUARANTEE_COST = 12
			NDefines.NDiplomacy.TRUCE_PERIOD_AFTER_KICKING_FROM_FACTION = 0
			NDefines.NDiplomacy.NUM_DAYS_TO_ENABLE_KICKING_NEW_MEMBERS_OF_FACTION = 0
			NDefines.NDiplomacy.NUM_DAYS_TO_ENABLE_REINVITE_KICKED_NATIONS = 0
			NDefines.NDiplomacy.FRONT_IS_DANGEROUS = 0

	-- NCountry
		NDefines.NCountry.WAR_SUPPORT_OFFNSIVE_WAR = -0.20
		NDefines.NCountry.WAR_SUPPORT_DEFENSIVE_WAR = 0.20
		NDefines.NCountry.WAR_SUPPORT_TENSION_IMPACT = 0.20
		NDefines.NCountry.WEEKLY_STABILITY_GAIN = 0.0
		NDefines.NCountry.WEEKLY_WAR_SUPPORT_GAIN = 0.0
		NDefines.NCountry.BUILDING_IMPORTANCE_FACTOR = 6.0		-- Was 3.0
		NDefines.NCountry.RESOURCE_IMPORTANCE_FACTOR = 2.0		-- Was 1.0
		NDefines.NCountry.STATE_VALUE_BUILDING_SLOTS_MULT = 8.0	-- Was 4.0
		NDefines.NCountry.DEFAULT_STABILITY = 0.50 	-- Could be the 'Middle' for modifers -- Default stability if not scripted otherwise.
		NDefines.NCountry.DEFAULT_WAR_SUPPORT = 0.50 	-- Could be the 'Middle' for modifers -- Default war support if not scripted otherwise.
		NDefines.NCountry.MIN_STABILITY = -0.50		-- 100% total negative, as -100% is nobody but -50% is vast majority.
		NDefines.NCountry.MAX_STABILITY = 1.0
		NDefines.NCountry.MIN_WAR_SUPPORT = -0.50	-- 100% total negative, as -100% is nobody but -50% is vast majority.
		NDefines.NCountry.MAX_WAR_SUPPORT = 1.0
		NDefines.NCountry.BASE_FUEL_GAIN_PER_OIL = 1.0
		NDefines.NCountry.BASE_FUEL_GAIN = 1.0
		NDefines.NCountry.MAX_BOMBING_WAR_SUPPORT_IMPACT = -0.50
		NDefines.NCountry.MAX_HEROES_BEING_KILLED_WAR_SUPPORT_IMPACT = -0.50
		NDefines.NCountry.MAX_CONVOYS_BEING_RAIDED_WAR_SUPPORT_IMPACT = -0.70
		NDefines.NCountry.RADAR_RANGE_MAX = 240; -- 20% higher than base.
		-- Optimization
			NDefines.NCountry.EVENT_PROCESS_OFFSET = 25 -- Performance enhancer. --TW/WTT

	-- NResistance

	-- NProduction

	-- NMarket

	-- NTechnology
		NDefines.NTechnology.BASE_YEAR_AHEAD_PENALTY_FACTOR = 2 -- Consider Changing
		NDefines.NTechnology.MAX_TECH_SHARING_BONUS = 1.0

	-- NPolitics

	-- NBuildings
		NDefines.NBuildings.MAX_SHARED_SLOTS = 60
		NDefines.NBuildings.MAX_BUILDING_LEVELS = 60
		NDefines.NBuildings.INFRASTRUCTURE_RESOURCE_BONUS = 0.20
		NDefines.NBuildings.SUPPLY_ROUTE_RESOURCE_BONUS = 0.20

	-- NDeployment

	-- NMilitary
		NDefines.NMilitary.CORPS_COMMANDER_DIVISIONS_CAP = 18	-- how many divisions a corps commander is limited to. 0 = inf  < 0 = blocked
		NDefines.NMilitary.FIELD_MARSHAL_ARMIES_CAP = 4			-- how many armies a field marshall is limited to. 0 = inf, < 0 = blocked	
		NDefines.NMilitary.FIELD_MARSHAL_DIVISIONS_CAP = 18		-- how many divisions a field marshall is limited to. 0 = inf  < 0 = blocked
		NDefines.NPolitics.ARMY_LEADER_COST = 3					-- command power cost for recruiting new leaders, 'this value' * number_of_existing_leaders_of_type	
		NDefines.NMilitary.RELIABILITY_WEATHER = 6.0			-- how much reliability is afffecting weather impact
		NDefines.NMilitary.BASE_FORT_PENALTY = -0.10

	-- NAir
		NDefines.NAir.AIR_WING_MAX_STATS_ATTACK = 1000 -- 10x higher than base.
		NDefines.NAir.AIR_WING_MAX_STATS_DEFENCE = 1000 -- 10x higher than base.
		NDefines.NAir.AIR_WING_MAX_STATS_AGILITY = 1000 -- 10x higher than base.
		NDefines.NAir.AIR_WING_MAX_STATS_SPEED = 8000 -- 10x higher than base.
		NDefines.NAir.AIR_WING_MAX_STATS_BOMBING = 1000 -- 10x higher than base.
		NDefines.NAir.DETECT_CHANCE_FROM_RADARS = 0.60 -- 20% higher than base.
		NDefines.NAir.DETECT_EFFICIENCY_FROM_RADAR = 0.84 -- 20% higher than base.

	-- NNavy
		NDefines.NNavy.MAX_CAPITALS_PER_AUTO_TASK_FORCE = 10
		NDefines.NNavy.BEST_CAPITALS_TO_CARRIER_RATIO = 2

	-- NRailwayGun

	-- NTrade
		NDefines.NTrade.BASE_LAND_TRADE_RANGE = 200 -- 5x lower than base.

	-- NAI
		NDefines.NAI.WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_FACTOR = 3.0 -- Scales how many carrier planes the AI want per carrier deck space.
		NDefines.NAI.WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_IN_PRODUCTION_FACTOR = 1.0 -- Scales how many carrier planes the AI want per deck space of carriers in production.

		NDefines.NAI.RESEARCH_DAYS_BETWEEN_WEIGHT_UPDATE = 30 -- Base 7

		NDefines.NAI.EQUIPMENT_MARKET_UPDATE_FREQUENCY_DAYS = 30 -- Base 11

		NDefines.NAI.DAYS_BETWEEN_AIR_PRIORITIES_UPDATE = 7 -- Base 4

		NDefines.NAI.AI_UPDATE_ROLES_FREQUENCY_HOURS = 72 -- Base 48

		NDefines.NAI.UPDATE_SUPPLY_BOTTLENECKS_FREQUENCY_HOURS = 168 -- Base 168
		NDefines.NAI.FIX_SUPPLY_BOTTLENECK_SATURATION_THRESHOLD = 0.75

		NDefines.NAI.UPDATE_SUPPLY_MOTORIZATION_FREQUENCY_HOURS = 168 -- Base 52

		NDefines.NAI.MIN_FIELD_STRENGTH_TO_BUILD_UNITS = 0.95 -- Base 0.70
		NDefines.NAI.MIN_MANPOWER_TO_BUILD_UNITS = 0.95 -- Base 0.70

		NDefines.NAI.CONSTRUCTION_PRIO_INFRASTRUCTURE = 0.20
		NDefines.NAI.CONSTRUCTION_PRIO_CIV_FACTORY = 0.80
		NDefines.NAI.CONSTRUCTION_PRIO_MIL_FACTORY = 0.70
		NDefines.NAI.CONSTRUCTION_PRIO_SUPPLY_BUILDING = 2.20				-- Was 1.10
		NDefines.NAI.CONSTRUCTION_PRIO_RAILWAY = 4.00
		NDefines.NAI.CONSTRUCTION_PRIO_RAILWAY_GUN_REPAIR = 15.00
		NDefines.NAI.CONSTRUCTION_PRIO_UNSPECIFIED = 0.50
		NDefines.NAI.CONSTRUCTION_PRIO_FACTOR_OCCUPIED_TERRITORY = 0.50
		NDefines.NAI.CONSTRUCTION_PRIO_FACTOR_OWNED_NONCORE = 0.75			-- Was 1.50
		NDefines.NAI.CONSTRUCTION_PRIO_FACTOR_OWNED_CORE = 4.00				-- Was 2.00
		NDefines.NAI.CONSTRUCTION_PRIO_FACTOR_REPAIRING = 0.30

		NDefines.NAI.AREA_DEFENSE_SETTING_VP = true
		NDefines.NAI.AREA_DEFENSE_SETTING_PORTS = true
		NDefines.NAI.AREA_DEFENSE_SETTING_AIRBASES = false
		NDefines.NAI.AREA_DEFENSE_SETTING_FORTS = false
		NDefines.NAI.AREA_DEFENSE_SETTING_COASTLINES = true
		NDefines.NAI.AREA_DEFENSE_SETTING_RAILWAYS = false
		-- Optimization
			NDefines.NAI.DIPLOMACY_ACCEPT_ATTACHE_BASE = 100
			NDefines.NAI.DIPLOMACY_ACCEPT_ATTACHE_OPINION_TRASHHOLD = 0
			NDefines.NAI.DIPLOMACY_ACCEPT_ATTACHE_OPINION_PENALTY = 0
			NDefines.NAI.GIVE_STATE_CONTROL_MIN_CONTROLLED = 0
			NDefines.NAI.GIVE_STATE_CONTROL_MIN_CONTROL_DIFF = 0

	-- NFocus
		-- Optimization
			NDefines.NFocus.MAX_SAVED_FOCUS_PROGRESS = 35

	-- NOperatives

	-- NIntel

	-- NCharacter

	-- NSupply
		NDefines.NSupply.MAX_RAILWAY_LEVEL = 5

	-- NAITheatre

	-- NIndustrialOrganisation

-- Optimization Defines
	NDefines.NAI.EQUIPMENT_MARKET_BASE_MARKET_RATIO = 0.35
	NDefines.NCountry.EVENT_PROCESS_OFFSET = 25 -- Performance enhancer. --TW/WTT

	Nlua = {
		NTopbar = {
			GAME_SPEED_LIMIT = 0,	-- Unlocks Speed to match as much as the proccessor can handle
			GAME_SPEED_STEPS = 5,	-- DONT CHANGE -- Deals with graphics and speed settings
			GAME_SPEED_ONE = 1,	-- DONT CHANGE --
			GAME_SPEED_TWO = 2,	-- DONT CHANGE --
			GAME_SPEED_THREE = 3,	-- DONT CHANGE --
			GAME_SPEED_FOUR = 4,	-- DONT CHANGE --
			GAME_SPEED_FIVE = 5,	-- DONT CHANGE --
		}
	}

-- VNR Naval Defines
	NDefines.NAI.ENEMY_NAVY_STRENGTH_DONT_BOTHER = 1.5;
	NDefines.NAI.SHIPS_PRODUCTION_BASE_COST = 25000;
	NDefines.NAI.NAVY_PREFERED_MAX_SIZE = 50;
	NDefines.NAI.DOCKYARDS_PER_NAVAL_DESIRE_EFFECT = 10;
	NDefines.NAI.PRODUCTION_MAX_PROGRESS_TO_SWITCH_NAVAL = 0;
	NDefines.NAI.PRODUCTION_WAIT_TO_FINISH_IF_EXPENSIVE = 0.02;
	NDefines.NAI.CARRIER_TASKFORCE_MAX_CARRIER_COUNT = 6;
	NDefines.NAI.SCREENS_TO_CAPITAL_RATIO = 4;
	NDefines.NAI.REPAIR_TASKFORCE_SIZE = 25;
	NDefines.NAI.WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_FACTOR = 2;
	NDefines.NAI.WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_IN_PRODUCTION_FACTOR = 1.5;
	NDefines.NAI.AI_WANTED_CARRIER_BASED_PLANES_FACTOR = 1.5;

	NDefines.NNavy.SCREEN_RATIO_FOR_FULL_SCREENING_FOR_CAPITALS = 2.0;
	NDefines.NNavy.ESCAPE_SPEED_PER_COMBAT_DAY = 0.03;
	NDefines.NNavy.MAX_ESCAPE_SPEED_FROM_COMBAT_DURATION = 0.30;
	NDefines.NNavy.CONVOY_ATTACK_BASE_FACTOR = 0.3;
	NDefines.NNavy.UNIT_TRANSFER_SPOTTING_SPEED_MULT = 15;
	NDefines.NNavy.NAVAL_INVASION_SPOTTING_SPEED_MULT = 30;
	NDefines.NNavy.SPOTTING_SPEED_EFFECT_FOR_INITIAL_UNIT_TRANSFER_SPOTTING = 0.5;
	NDefines.NNavy.SPOTTING_SPEED_EFFECT_FOR_INITIAL_NAVAL_INVASION_SPOTTING = 0.5;
	NDefines.NNavy.CONVOY_EFFICIENCY_MIN_VALUE = 0;
	NDefines.NNavy.CONVOY_HIT_PROFILE = 110;
	NDefines.NNavy.NAVY_PIERCING_THRESHOLDS = { 2.0, 1.0, 0.85, 0.75, 0.6, 0.5, 0.3, 0.1, 0.0 }
	NDefines.NNavy.NAVY_PIERCING_THRESHOLD_CRITICAL_VALUES = { 3.0, 1.0, 0.65, 0.55, 0.4, 0.3, 0.15, 0.1, 0.0 }
	NDefines.NNavy.NAVY_PIERCING_THRESHOLD_DAMAGE_VALUES = { 1.0, 1.0, 0.7, 0.6, 0.45, 0.35, 0.2, 0.1, 0.01 }
	NDefines.NNavy.MISSION_MAX_REGIONS = 6;
	NDefines.NNavy.CONVOY_DEFENSE_MAX_REGION_TO_TASKFORCE_RATIO = 4;
	NDefines.NNavy.COMBAT_TORPEDO_CRITICAL_CHANCE = 0.4
	NDefines.NNavy.CARRIER_STACK_PENALTY = 6;
	NDefines.NNavy.CARRIER_STACK_PENALTY_EFFECT = 0.1;
	NDefines.NNavy.COMBAT_MIN_DURATION = 20;
	NDefines.NNavy.CAPITAL_ONLY_COMBAT_ACTIVATE_TIME = 22;
	NDefines.NNavy.ALL_SHIPS_ACTIVATE_TIME = 30;
	NDefines.NNavy.COMBAT_CHASE_RESIGNATION_HOURS = 4;
	NDefines.NNavy.ANTI_AIR_TARGETING = 1.0;
	NDefines.NNavy.SUBMARINE_REVEAL_BASE_CHANCE = 14;
	NDefines.NNavy.SUBMARINE_BASE_TORPEDO_REVEAL_CHANCE = 0.05;
	NDefines.NNavy.WAR_SCORE_GAIN_FOR_SUNK_SHIP_MANPOWER_FACTOR = 0.01;
	NDefines.NNavy.WAR_SCORE_GAIN_FOR_SUNK_SHIP_PRODUCTION_COST_FACTOR = 0.04;
	NDefines.NNavy.SHORE_BOMBARDMENT_CAP = 0.5;
	NDefines.NNavy.BASE_POSITIONING = 0.5;
	NDefines.NNavy.RELATIVE_SURFACE_DETECTION_TO_POSITIONING_FACTOR = 0.05;
	NDefines.NNavy.MAX_POSITIONING_BONUS_FROM_SURFACE_DETECTION = 0.2;
	NDefines.NNavy.POSITIONING_PENALTY_FOR_SHIPS_JOINED_COMBAT_AFTER_IT_STARTS = 0.04;
	NDefines.NNavy.MAX_POSITIONING_PENALTY_FOR_NEWLY_JOINED_SHIPS = 0.8;
	NDefines.NNavy.HIGHER_SHIP_RATIO_POSITIONING_PENALTY_FACTOR = 0.25;
	NDefines.NNavy.MAX_POSITIONING_PENALTY_FROM_HIGHER_SHIP_RATIO = 0.75;
	NDefines.NNavy.DAMAGE_PENALTY_ON_MINIMUM_POSITIONING = 0.45;
	NDefines.NNavy.SCREENING_EFFICIENCY_PENALTY_ON_MINIMUM_POSITIONING = 1;
	NDefines.NNavy.AA_EFFICIENCY_PENALTY_ON_MINIMUM_POSITIONING = 0.5;
	NDefines.NNavy.MANPOWER_LOSS_RATIO_ON_STR_LOSS = 0.1;
	NDefines.NNavy.MANPOWER_LOSS_RATIO_ON_SUNK = 0.25;
	NDefines.NNavy.BASE_GUN_COOLDOWNS = { 1.0, 8.0, 1.0 };
	NDefines.NNavy.COMBAT_TORPEDO_CRITICAL_DAMAGE_MULT = 3.0;
	NDefines.NNavy.PRIDE_OF_THE_FLEET_UNASSIGN_COST = 25;
	NDefines.NNavy.SUBMARINE_ESCAPE_RATIOS = { 90, 15, 3.0, 1.0, 0.1 }
	NDefines.NNavy.CONVOY_ATTACK_BASE_FACTOR = 0.3
	NDefines.NNavy.EXPERIENCE_FACTOR_CONVOY_ATTACK = 0.1
	NDefines.NNavy.EXPERIENCE_FACTOR_NON_CARRIER_GAIN = 0.1
	NDefines.NNavy.EXPERIENCE_FACTOR_CARRIER_GAIN = 0.2
	NDefines.NNavy.TRAINING_DAILY_COUNTRY_EXP_FACTOR = 0.005
	NDefines.NNavy.TRAINING_MAX_DAILY_COUNTRY_EXP = 7
	NDefines.NNavy.NAVAL_TRANSFER_BASE_SPEED = 4
	NDefines.NNavy.AMPHIBIOUS_INVADE_SPEED_BASE = 0.25
	NDefines.NNavy.SUPREMACY_PER_SHIP_PER_MANPOWER = 0.001
	NDefines.NNavy.SUPREMACY_PER_SHIP_PER_IC = 0.05
	NDefines.NNavy.AGGRESSION_SETTINGS_VALUES = {
			0,		-- do not engage
			1.0,	-- low
			1.4,	-- medium
			2.2,	-- high
			10000,	-- I am death incarnate!
	};
	NDefines.NNavy.GUN_HIT_PROFILES = { -- hit profiles for guns, if target ih profile is lower the gun will have lower accuracy
			80.0,	-- big guns
			105.0,	-- torpedoes
			45.0,	-- small guns
	};
	NDefines.NNavy.MISSION_SUPREMACY_RATIOS = {
			0.0, -- HOLD
			0.6, -- PATROL
			1.0, -- STRIKE FORCE
			0.15, -- CONVOY RAIDING
			0.25, -- CONVOY ESCORT
			0.2, -- MINES PLANTING
			0.1, -- MINES SWEEPING
			0.0, -- TRAIN
			0.0, -- RESERVE_FLEET
			0.85, -- NAVAL_INVASION_SUPPORT
	}
	NDefines.NAI.MIN_NAVAL_MISSION_PRIO_TO_ASSIGN = {
			0, -- HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)
			200, -- PATROL
			200, -- STRIKE FORCE
			100, -- CONVOY RAIDING
			100, -- CONVOY ESCORT
			100, -- MINES PLANTING
			100, -- MINES SWEEPING
			300, -- TRAIN
			0, -- RESERVE_FLEET
			100, -- NAVAL INVASION SUPPORT
	};

	NDefines.NAI.HIGH_PRIO_NAVAL_MISSION_SCORES = {
			0, -- HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)
			10000, -- PATROL
			8000, -- STRIKE FORCE
			500, -- CONVOY RAIDING
			1000, -- CONVOY ESCORT
			-1, -- MINES PLANTING
			300, -- MINES SWEEPING
			0, -- TRAIN
			0, -- RESERVE_FLEET
			1000, -- NAVAL INVASION SUPPORT
	};
	NDefines.NAI.MAX_MISSION_PER_TASKFORCE = {
			0, -- HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)
			2, -- PATROL
			8, -- STRIKE FORCE
			1.5, -- CONVOY RAIDING
			4, -- CONVOY ESCORT
			2, -- MINES PLANTING
			2, -- MINES SWEEPING
			0, -- TRAIN
			0, -- RESERVE_FLEET
			10, -- NAVAL INVASION SUPPORT
	}

	NDefines.NAir.COMBAT_DAMAGE_SCALE_CARRIER = 20;
	NDefines.NAir.NAVAL_STRIKE_CARRIER_MULTIPLIER = 15;
	NDefines.NAir.NAVAL_STRIKE_TARGETTING_TO_AMOUNT = 0.4;
	NDefines.NAir.CARRIER_HOURS_DELAY_AFTER_EACH_COMBAT = 2;
	NDefines.NAir.REINFORCEMENT_DISABLING_DURATION_IN_LAND_CARRIER_TRANSFER = 24;
	NDefines.NAir.DISRUPTION_FACTOR_CARRIER = 10.0;

	NDefines.NProduction.EQUIPMENT_MODULE_ADD_XP_COST = 2;
	NDefines.NProduction.EQUIPMENT_MODULE_REPLACE_XP_COST = 3;
	NDefines.NProduction.EQUIPMENT_MODULE_CONVERT_XP_COST = 1;
	NDefines.NProduction.EQUIPMENT_MODULE_REMOVE_XP_COST = 1;
	NDefines.NProduction.BASE_NAVAL_EQUIPMENT_CONVERSION_IC_COST_FACTOR = 0.1
	NDefines.NProduction.MIN_NAVAL_EQUIPMENT_CONVERSION_RESOURCE_COST_FACTOR = 0.1

	NDefines.NIntel.NAVY_SHIP_COUNT_INTEL_MIN = 0;
	NDefines.NIntel.NAVY_SHIP_COUNT_INTEL_MAX = 0.4;
	NDefines.NIntel.NAVY_MIN_INTEL_TO_SHOW_EXISTING_CATEGORY_TYPES = 0.01;
	NDefines.NIntel.NAVY_SHIP_TYPE_COUNT_INTEL_MIN = 0.01;
	NDefines.NIntel.NAVY_SHIP_TYPE_COUNT_INTEL_MAX = 0.3;
	NDefines.NIntel.NAVY_MIN_INTEL_TO_SHOW_SHIP_CLASSES = 0.15;
	NDefines.NIntel.NAVY_MIN_INTEL_TO_SHOW_SHIP_DESIGN_DETAILS = 0.5;

	NDefines.NGame.DECISION_ALERT_TIMEOUT_DAYS = 60;

-- Production Defines
	--------------------------------------------------------------------------------------------------------------
	-- INDUSTRIAL PRODUCTION
	--------------------------------------------------------------------------------------------------------------

	NDefines.NProduction.BASE_FACTORY_SPEED_MIL = 7
	NDefines.NProduction.BASE_FACTORY_SPEED_NAV = 4
	NDefines.NProduction.BASE_FACTORY_START_EFFICIENCY_FACTOR = 6
	NDefines.NProduction.BASE_FACTORY_EFFICIENCY_GAIN = 0.6
	NDefines.NProduction.PRODUCTION_RESOURCE_LACK_PENALTY = -0.25

	--------------------------------------------------------------------------------------------------------------
	-- REPLENISHMENT and UPKEEP MECHANICS
	--------------------------------------------------------------------------------------------------------------

	NDefines.NMilitary.UNIT_UPKEEP_ATTRITION = 0.02							--Constant attrition value applied to armies.

	--------------------------------------------------------------------------------------------------------------
	-- FUEL CONSUMPTION BALANCE
	--------------------------------------------------------------------------------------------------------------

	NDefines.NCountry.BASE_FUEL_GAIN_PER_OIL = 1.0
	NDefines.NCountry.BASE_FUEL_GAIN = 1.0
	---NDefines.NAir.FUEL_COST_MULT = 0.2625
	---NDefines.NMilitary.ARMY_FUEL_COST_MULT = 0.375
	---NDefines.NNavy.FUEL_COST_MULT = 0.05

-- BMCombat Defines
	--------------------------------------------------------------------------------------------------------------
	-- COUNTRY CHANGES 
	--------------------------------------------------------------------------------------------------------------

	NDefines.NCountry.LOCAL_MANPOWER_ACCESSIBLE_NON_CORE_FACTOR = 0.05
	NDefines.NCountry.MAX_BOMBING_WAR_SUPPORT_IMPACT = -0.70
	NDefines.NCountry.MAX_HEROES_BEING_KILLED_WAR_SUPPORT_IMPACT = -0.60
	NDefines.NCountry.MAX_CONVOYS_BEING_RAIDED_WAR_SUPPORT_IMPACT = -0.50
	NDefines.NCountry.AIR_SUPPLY_CONVERSION_SCALE = 0.075  --- Air supply is reasonable/usable now

	--------------------------------------------------------------------------------------------------------------
	-- MILITARY EXPERIENCE 
	--------------------------------------------------------------------------------------------------------------

	NDefines.NMilitary.BASE_DIVISION_BRIGADE_GROUP_COST = 16 -- Vanilla 20
	NDefines.NMilitary.BASE_DIVISION_BRIGADE_CHANGE_COST = 4 -- Vanilla 5
	NDefines.NMilitary.BASE_DIVISION_SUPPORT_SLOT_COST = 8 -- Vanilla 10

	NDefines.NMilitary.MAX_ARMY_EXPERIENCE = 950
	NDefines.NMilitary.MAX_NAVY_EXPERIENCE = 550
	NDefines.NMilitary.MAX_AIR_EXPERIENCE = 675

	NDefines.NMilitary.ARMY_LEADER_XP_GAIN_PER_UNIT_IN_COMBAT = 0.11 --- MOD was 2.0 should half the increase

	NDefines.NMilitary.TRAINING_MAX_DAILY_COUNTRY_EXP = 0.16			-- (Def: 0.08)*2 | Maximum army XP gained per day from training
	NDefines.NMilitary.UNIT_EXPERIENCE_PER_TRAINING_DAY = 0.00225       -- (Def: 0.0015 *1.5 | No official documentation)
	NDefines.NAir.AIR_WING_COUNTRY_XP_FROM_TRAINING_FACTOR = 0.0075 	-- (Def: 0.005)*1.5 | Factor on country Air XP gained from wing training
	NDefines.NNavy.TRAINING_DAILY_COUNTRY_EXP_FACTOR = 0.0015			-- (Def: 0.001)*1.5 |Factor used to scale the Daily Country Navy XP gain

	--------------------------------------------------------------------------------------------------------------
	-- LAND COMBAT REWORK
	--------------------------------------------------------------------------------------------------------------


	NDefines.NMilitary.RECON_SKILL_IMPACT = 10
	NDefines.NMilitary.DAMAGE_SPLIT_ON_FIRST_TARGET = 0.5  -- (was 0.35) -- % of damage dealt to the first target in a combat. The rest will be split amongst subsequent targets. Modifiers can affect this up to a maximum of 0.9. That value must not be exposed as a define.	#WICHTIG

	NDefines.NMilitary.ENEMY_AIR_SUPERIORITY_IMPACT = -0.50
	NDefines.NMilitary.ANTI_AIR_TARGETTING_TO_CHANCE = 0.10
	NDefines.NMilitary.TRAINING_MIN_STRENGTH = 0.2
	NDefines.NMilitary.AIR_SUPPORT_BASE = 0.25
	NDefines.NMilitary.PLAYER_ORDER_PLANNING_DECAY = 0.02
	NDefines.NAir.ANTI_AIR_ATTACK_TO_DAMAGE_REDUCTION_FACTOR = 0.35						-- Balancing value to convert equipment stat anti_air_attack to the damage reduction modifier apply to incoming air attacks against units with AA.

	NDefines.NMilitary.COMBAT_STACKING_START = 10
	NDefines.NMilitary.COMBAT_STACKING_EXTRA = 6
	NDefines.NMilitary.COMBAT_STACKING_PENALTY = -0.08

	NDefines.NMilitary.BASE_CAPTURE_EQUIPMENT_RATIO = 0.05

	NDefines.NMilitary.HOURLY_ORG_MOVEMENT_IMPACT = -0.1 

	NDefines.NMilitary.MIN_SUPPLY_CONSUMPTION = 0.01

	NDefines.NMilitary.TRAINING_ATTRITION = 0.01

	--- Speed ---
	NDefines.NMilitary.ENEMY_AIR_SUPERIORITY_SPEED_IMPACT = -0.2 -- #MOD -- was -0.3,     -- effect on speed due to enemy air superiority
	NDefines.NMilitary.COMBAT_MOVEMENT_SPEED = 0.4 -- #MOD -- was 0.33,	               -- speed reduction base modifier in combat

	NDefines.NMilitary.FUEL_CAPACITY_DEFAULT_HOURS = 144 -- #MOD -- was 96,				-- default capacity if not specified

	--- Tactics and Recon ---
	NDefines.NMilitary.INITIATIVE_PICK_COUNTER_ADVANTAGE_FACTOR  = 0.75 -- #MOD -- was 0.35, -- advantage per leader level for picking a counter

	--- War Score ---
	NDefines.NMilitary.WAR_SCORE_AIR_IC_LOSS_FACTOR = 0.008						-- war score gained for every IC of damage done to an enemy's air mission
	NDefines.NMilitary.WAR_SCORE_LAND_DAMAGE_FACTOR = 0.01          				-- war score gained for every strengh damage done to an enemy's army
	NDefines.NMilitary.WAR_SCORE_LAND_IC_LOSS_FACTOR = 0.008         				-- war score gained for every IC damage done to an enemy's army

	NDefines.NMilitary.LAND_COMBAT_COLLATERAL_INFRA_FACTOR = 0.007

	NDefines.NMilitary.FLANKED_PROVINCES_COUNT = 2

	NDefines.NMilitary.NEW_COMMANDER_RANDOM_PERSONALITY_TRAIT_CHANCES = { 0.95, 0.50, 0.35, 0.10 };
	--------------------------------------------------------------------------------------------------------------
	-- AIR COMBAT REWORK
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAir.AIR_WING_FLIGHT_SPEED_MULT = 0.03  ---0.04
	NDefines.NAir.AIR_WING_MAX_STATS_ATTACK = 200
	NDefines.NAir.AIR_WING_MAX_STATS_DEFENCE = 200
	NDefines.NAir.AIR_WING_MAX_STATS_AGILITY = 200
	NDefines.NAir.AIR_WING_MAX_STATS_SPEED = 2000
	NDefines.NAir.AIR_WING_MAX_STATS_BOMBING = 200
	NDefines.NAir.BIGGEST_AGILITY_FACTOR_DIFF = 5.0


	NDefines.NAir.AIR_WING_ATTACK_LOGISTICS_TRUCK_DAMAGE_FACTOR = 0.35
	NDefines.NAir.AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_FACTOR = 0.065
	NDefines.NAI.LAND_COMBAT_ANTI_LOGISTICS_PER_ENEMY_ARMY = 2.65  --5     -- Amount of CAS planes requested per enemy army for anti-logistics
	NDefines.NAir.ANTI_AIR_PLANE_DAMAGE_FACTOR = 0.35	-- 0.5			-- Anti Air Gun Damage factor
	NDefines.NAir.CAS_NIGHT_ATTACK_FACTOR = 0.35	-- #MOD 0.5 -- was 0.1,			-- CAS damaged get multiplied by this in land combats at night
	--#large buff to CAS. should result in 36% more CAS damage on average (1.5/1.1) (100% at day + 50% at night is 1.5 for mod, and 1.1 for vanilla)
	--#also, CAS was apparently utter trash at night, which means that in timeszones with bad sortie timing, CAS was way weaker than elsewhere. Eastern France, Benelux, and Indian Ocean were such zones). This should now not matter anymore. Also, Land units get -50% at night, why would CAS get -90% instead?

	NDefines.NAir.NAVAL_STRIKE_DAMAGE_TO_STR = 0.5					-- Balancing value to convert damage ( naval_strike_attack * hits ) to Strength reduction.
	NDefines.NAir.NAVAL_STRIKE_DAMAGE_TO_ORG = 0.75					-- Balancing value to convert damage ( naval_strike_attack * hits ) to Organisation reduction.
	--NDefines.NAir.NAVAL_STRIKE_CARRIER_MULTIPLIER = 30.0              -- damage bonus when planes are in naval combat where their carrier is present (and can thus sortie faster and more effectively)
	NDefines.NAir.NAVAL_STRIKE_TARGETTING_TO_AMOUNT = 0.5			-- Balancing value to convert the naval_strike_targetting equipment stats to chances of how many airplanes managed to do successfull strike.

	---NDefines.NMilitary.LAND_AIR_COMBAT_STR_DAMAGE_MODIFIER = 0.06
	---NDefines.NMilitary.LAND_AIR_COMBAT_ORG_DAMAGE_MODIFIER = 0.08

	--------------------------------------------------------------------------------------------------------------
	-- NAVAL COMBAT REWORK
	--------------------------------------------------------------------------------------------------------------

	-- NDefines.NNavy.ANTI_AIR_TARGETTING_TO_CHANCE = 0.5		-- Balancing value to convert averaged equipment stats (anti_air_targetting and naval_strike_agility) to probability chances of airplane being hit by navies AA.
	NDefines.NNavy.NAVAL_COMBAT_RESULT_TIMEOUT_YEARS = 24							-- after that many years we clear the naval combat results so they don't get stuck forever in the memory.
	NDefines.NNavy.CONVOY_LOSS_HISTORY_TIMEOUT_MONTHS = 24					-- after this many months remove the history of lost convoys to not bloat savegames and memory since there is no way to see them anyway
	NDefines.NNavy.NAVAL_COMBAT_AIR_CAPITAL_TARGET_SCORE = 50
	NDefines.NNavy.NAVAL_COMBAT_AIR_CARRIER_TARGET_SCORE = 100
	NDefines.NNavy.HIGHER_SHIP_RATIO_POSITIONING_PENALTY_FACTOR	= 0.75 -- if one side has more ships than the other that side will get this penalty for each +100% ship ratio it has
	NDefines.NNavy.SUB_DETECTION_CHANCE_BASE_SPOTTING_EFFECT = 1.0			-- effect of base spotting for initial spotting of pure submarine forces. this along with next value is added together and rolled against a random to start spotting
	NDefines.NNavy.SUB_DETECTION_CHANCE_SPOTTING_SPEED_EFFECT = 4.0				-- effect of spotting speed for initial spotting of pure submarine forces. this along with prev value is added together and rolled against a random to start spotting
	NDefines.NNavy.SUB_DETECTION_CHANCE_BASE_SPOTTING_POW_EFFECT = 3.0	

	NDefines.NNavy.ANTI_AIR_POW_ON_INCOMING_AIR_DAMAGE = 0.25	-- received air damage is calculated using following: 1 - ( (ship_anti_air + fleet_anti_air * SHIP_TO_FLEET_ANTI_AIR_RATIO )^ANTI_AIR_POW_ON_INCOMING_AIR_DAMAGE ) * ANTI_AIR_MULT_ON_INCOMING_AIR_DAMAGE
	NDefines.NNavy.ANTI_AIR_MULT_ON_INCOMING_AIR_DAMAGE	= 0.15
	NDefines.NNavy.MAX_ANTI_AIR_REDUCTION_EFFECT_ON_INCOMING_AIR_DAMAGE = 0.75	-- damage reduction for incoming air attacks is clamped to this value at maximum.

	NDefines.NNavy.AGGRESSION_SETTINGS_VALUES = { -- ships will use this values while deciding to attack enemies
			0,		-- do not engage
			1.0,	-- low
			1.5,	-- medium
			2.5,	-- high
			10000,	-- I am death incarnate!
		}
		
	NDefines.NNavy.WAR_SCORE_GAIN_FOR_SUNK_SHIP_MANPOWER_FACTOR = 0.002			-- war score gained for every manpower killed when sinking a ship
	NDefines.NNavy.WAR_SCORE_GAIN_FOR_SUNK_SHIP_PRODUCTION_COST_FACTOR = 0.01		-- war score gained for every IC of the sunk ship
	NDefines.NNavy.EXPERIENCE_FACTOR_CARRIER_GAIN = 0.04							-- Xp gain by carrier ships in the combat

	---NDefines.NNavy.CARRIER_STACK_PENALTY = 8 -- The most efficient is 4 carriers in combat. 5+ brings the penalty to the amount of wings in battle.
	NDefines.NNavy.ANTI_AIR_TARGETTING_TO_CHANCE = 0.07 -- Balancing value to convert averaged equipment stats (anti_air_targetting and naval_strike_agility) to probability chances of airplane being hit by navies AA.
	NDefines.NNavy.ANTI_AIR_ATTACK_TO_AMOUNT = 0.005 -- Balancing value to convert equipment stat anti_air_attack to the random % value of airplanes being hit.

	NDefines.NAir.COMBAT_DAMAGE_SCALE_CARRIER = 3.3
	NDefines.NAir.NAVAL_STRIKE_CARRIER_MULTIPLIER = 3.3
	NDefines.NNavy.CARRIER_STACK_PENALTY = 10
	NDefines.NNavy.CARRIER_STACK_PENALTY_EFFECT = 0.08
	NDefines.NAI.CARRIER_TASKFORCE_MAX_CARRIER_COUNT = 10


	NDefines.NNavy.SUPREMACY_PER_SHIP_PER_MANPOWER = 0.05
	NDefines.NNavy.SUPREMACY_PER_SHIP_PER_IC = 0.005
	NDefines.NNavy.SUPREMACY_PER_SHIP_BASE = 0.0

	--------------------------------------------------------------------------------------------------------------
	-- ARMOUR DAMAGE REWORK
	--------------------------------------------------------------------------------------------------------------

	NDefines.NMilitary.PIERCING_THRESHOLDS = {                                            -- Our piercing / their armor must be this value to deal damage fraction equal to the index in the array below [higher number = higher penetration]. If armor is 0, 1.00 will be returned.
	    1.30,
	    1.1,
	    1.0,
	    0.9,
	    0.75,
	    0.5,
	    0.25,
	    0.00, --there isn't much point setting this higher than 0
	}

	NDefines.NMilitary.PIERCING_THRESHOLD_DAMAGE_VALUES = {                                -- 0 armor will always receive maximum damage (so add overmatching at your own peril). the system expects at least 2 values, with no upper limit.
	    1.00,
	    0.90,
	    0.80,
	    0.70,
	    0.60,
	    0.55,
	    0.40,
	    0.20,
	}

	NDefines.NMilitary.ARMOR_VS_AVERAGE = 0.2  -- 护甲和平均值的比例
	NDefines.NMilitary.PEN_VS_AVERAGE = 0.3  -- 穿透和平均值的比例
	NDefines.NMilitary.LAND_COMBAT_STR_ARMOR_ON_SOFT_DICE_SIZE = 2  -- 金盾状态下的hp伤害骰子数
	NDefines.NMilitary.LAND_COMBAT_ORG_ARMOR_ON_SOFT_DICE_SIZE = 5  -- 金盾状态下的组织度伤害骰子数

	NDefines.NMilitary.LAND_COMBAT_STR_ARMOR_DEFLECTION_FACTOR = 0.7
	NDefines.NMilitary.LAND_COMBAT_ORG_ARMOR_DEFLECTION_FACTOR = 0.9

	--------------------------------------------------------------------------------------------------------------
	-- STRATEGIC BOMBING DAMAGE REWORK
	--------------------------------------------------------------------------------------------------------------

	---NDefines.NCountry.BOMBING_WAR_SUPPORT_PENALTY_SCALE = -100.00 			-- Scaling of bomber damage to war support impact, will be added weekly as a war support penalty
	---NDefines.NCountry.MAX_BOMBING_WEEKLY_WAR_SUPPORT_PENALTY = -0.50		-- Max penalty that will gained per week from bomber's damage
	---NDefines.NCountry.BOMBING_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.10		-- Weekly decay of bomber damage war support penalty

	NDefines.NAir.AIR_WING_BOMB_DAMAGE_FACTOR = 6					-- Used to balance the damage done while bombing.

	NDefines.NAir.BOMBING_TARGETING_RANDOM_FACTOR = 0.15							-- % of picking the wrong target

	NDefines.NAir.BASE_STRATEGIC_BOMBING_HIT_SHIP_CHANCE = 0.1		-- Chance to hit a ship in port when it is bombed.
	NDefines.NAir.BASE_STRATEGIC_BOMBING_HIT_SHIP_DAMAGE_FACTOR = 50
	NDefines.NAir.BASE_STRATEGIC_BOMBING_HIT_PLANE_CHANCE = 0.65		-- Chance to hit a plane in airbase when it is bombed.
	NDefines.NAir.BASE_STRATEGIC_BOMBING_HIT_PLANE_DAMAGE_FACTOR = 50
	NDefines.NAir.AA_INDUSTRY_AIR_DAMAGE_FACTOR = -0.036									-- 5x levels = 60% defense from bombing

	--------------------------------------------------------------------------------------------------------------
	-- STRATEGIC NAVAL BOMBARDEMENT REWORK
	--------------------------------------------------------------------------------------------------------------

	NDefines.NNavy.SHORE_BOMBARDMENT_CAP = 0.35
	NDefines.NNavy.HEAVY_GUN_ATTACK_TO_SHORE_BOMBARDMENT = 0.1  -- heavy gun attack value is divided by this value * 100 and added to shore bombardment modifier
	NDefines.NNavy.LIGHT_GUN_ATTACK_TO_SHORE_BOMBARDMENT = 0.05 -- light gun attack value is divided by this value * 100 and added to shore bombardment modifier

	--------------------------------------------------------------------------------------------------------------
	-- EXPERIMENTAL DEFINES
	--------------------------------------------------------------------------------------------------------------

	NDefines.NMilitary.COMBAT_MINIMUM_TIME = 6
	---NDefines.NMilitary.COMBAT_VALUE_ORG_IMPORTANCE = 1.3		-- Multiplier on TotalOrganisation when determining the combat value of a division
	NDefines.NMilitary.SPOTTING_QUALITY_DROP_HOURS = 5 	-- Each X hours the intel quality drops after unit was spotted.
	---NDefines.NMilitary.LAND_COMBAT_STR_DAMAGE_MODIFIER = 0.040       -- global damage modifier... but some equipment is returned at end of battles see : EQUIPMENT_COMBAT_LOSS_FACTOR
	---NDefines.NMilitary.LAND_COMBAT_ORG_DAMAGE_MODIFIER = 0.035        -- global damage modifier
	NDefines.NMilitary.ENEMY_AIR_SUPERIORITY_DEFENSE_STEEPNESS = 120 -- how quickly defense approaches the max impact diminishing returns curve
	---NDefines.NMilitary.ORG_LOSS_FACTOR_ON_CONQUER = 0.3              -- percentage of (max) org loss on takign enemy province

	NDefines.NAir.COMBAT_MULTIPLANE_CAP = 2.0		-- How much bonus gives the airplanes amount advantage (2vs1) to winning the situation.
	NDefines.NAir.HOURS_DELAY_AFTER_EACH_COMBAT = 7					-- How many hours needs the wing to be ready for the next combat. Use for tweaking if combats happens too often. (generally used as double because of roundtrip)
	NDefines.NAir.CARRIER_HOURS_DELAY_AFTER_EACH_COMBAT = 8          -- how often carrier planes do battle inside naval combat
	NDefines.NAir.AA_INDUSTRY_AIR_DAMAGE_FACTOR = -0.15				-- 5x levels = 60% defense from bombing
	---NDefines.NMilitary.LAND_AIR_COMBAT_MAX_PLANES_PER_ENEMY_WIDTH = 4 -- how many CAS/TAC can enter a combat depending on enemy width there

	NDefines.NNavy.COMBAT_BASE_HIT_CHANCE = 0.05									-- base chance for hit
	NDefines.NNavy.COMBAT_EVASION_TO_HIT_CHANCE = 0.025							-- we take ship evasion stats, and mult by this value, so it gives hit chance reduction. So if reduction is 0.025 and ship evasion = 10, then there will be 0.25 (25%) lower hit chance. (Fe. 50% base -25% from evasion +10% bcoz it's very close).
	NDefines.NNavy.COMBAT_MIN_HIT_CHANCE = 0.03									-- never less hit chance then this?
	NDefines.NNavy.COMBAT_EVASION_TO_HIT_CHANCE_TORPEDO_MULT = 50.0				-- the above evasion hit chance is multiplied by 400% if shooting with torpedos. Torpedoes are slow so evasion matters more.
	NDefines.NNavy.COMBAT_TORPEDO_CRITICAL_DAMAGE_MULT = 3.0						-- multiplier to damage when got critical hit from torpedo. (Critical hits are devastating as usualy torpedo_attack are pretty high base values).
	NDefines.NNavy.COMBAT_DAMAGE_TO_STR_FACTOR = 0.6								-- casting damage value to ship strength multiplier. Use it ot balance the game difficulty.
	NDefines.NNavy.COMBAT_CHASE_RESIGNATION_HOURS = 10								-- Before we resign chasing enemy, give them some minimum time so the combat doesn't end instantly.
	NDefines.NNavy.COMBAT_MAX_GROUPS = 2										-- Max amount of "Fire Exchange" groups (FEX).
	NDefines.NNavy.NAVAL_SUPREMACY_CAN_INVADE = 0.6								-- required naval supremacy to perform invasions on an area
	NDefines.NNavy.SUBMARINE_REVEAL_BASE_CHANCE = 0.04							-- Base chance for submarine detection. It's modified by the difference of a spootter's submarines detection vs submarine visibility. Use this variable for game balancing.

	---NDefines.NMilitary.OUT_OF_SUPPLY_ATTRITION = 0.15                 -- max attrition when out of supply
	---NDefines.NMilitary.OUT_OF_SUPPLY_SPEED = -0.9                    -- max speed reduction from supply
	NDefines.NMilitary.NON_CORE_SUPPLY_SPEED = -0.7				   -- we are not running on our own VP supply so need to steal stuff along the way
	---NDefines.NMilitary.OUT_OF_SUPPLY_MORALE = -0.3                   -- max org regain reduction from supply

	NDefines.NMilitary.PARACHUTE_COMPLETE_ORG = 0.5				   -- Organisation value (in %) after unit being dropped regardless if failed disrupted or successful.

	NDefines.NMilitary.RIVER_CROSSING_PENALTY_LARGE = -0.7          -- large river crossing
	NDefines.NMilitary.RIVER_CROSSING_SPEED_PENALTY = -0.30           -- small river crossing
	NDefines.NMilitary.RIVER_CROSSING_SPEED_PENALTY_LARGE = -0.65     -- large river crossing
	NDefines.NMilitary.BASE_FORT_PENALTY = -0.20 					   -- fort penalty		#HOI4TGW ::: BASE_FORT_PENALTY = -0.15
	NDefines.NMilitary.MULTIPLE_COMBATS_PENALTY = -0.35               -- defender penalty if attacked from multiple directions
	NDefines.NMilitary.ENCIRCLED_PENALTY = -0.25

	--------------------------------------------------------------------------------------------------------------
	-- ABADON'S EXPERIMENTAL DEFINES + TWEAKS
	--------------------------------------------------------------------------------------------------------------

	---NDefines.NMilitary.DIG_IN_FACTOR = 0.02  ---0.01 	Vanilla 0.02					   -- bonus factor for each dug-in level
	---NDefines.NMilitary.UNIT_DIGIN_SPEED = 0.5		-- Vanilla 1				   -- how "deep" you can dig a day.
	---NDefines.NMilitary.UNIT_DIGIN_CAP = 7             --Vanilla 5              -- how "deep" you can dig you can dig in until hitting max bonus

	NDefines.NMilitary.WITHDRAWING_SPEED_FACTOR =  0.2 -- vanilla 0.15 

	NDefines.NMilitary.COMBAT_OVER_WIDTH_PENALTY = -0.6	-- #MOD -- was -1.5,			-- over combat width penalty per %.
	--#this means that exactly matching the combat width matters even less now. (1% penalty per 1% over combat width)
	NDefines.NMilitary.COMBAT_OVER_WIDTH_PENALTY_MAX = -0.50	-- over combat width max (when you cant join no more).


	NDefines.NMilitary.FIELD_EXPERIENCE_SCALE = 0.003;			--0.002 -(NSB)> 0.0015
	NDefines.NMilitary.FIELD_EXPERIENCE_MAX_PER_DAY = 4;
	NDefines.NMilitary.TRAINING_EXPERIENCE_SCALE = 124.0;			--62.0

	--------------------------------------------------------------------------------------------------------------
	-- RCS Defines
	--------------------------------------------------------------------------------------------------------------

	NDefines.NMilitary.SUPPLY_GRACE = 72							   -- troops always carry 3 days of food and supply
	NDefines.NMilitary.SUPPLY_ORG_MAX_CAP = 0.50                     -- Max organization is factored by this if completely out of supply
	NDefines.NMilitary.OUT_OF_SUPPLY_ATTRITION = 0.10                 -- max attrition when out of supply
	NDefines.NMilitary.OUT_OF_SUPPLY_SPEED = -0.65                    -- max speed reduction from supply
	NDefines.NMilitary.OUT_OF_SUPPLY_MORALE = -0.5                   -- max org regain reduction from supply

	NDefines.NMilitary.LAND_COMBAT_STR_DAMAGE_MODIFIER = 0.05       -- global damage modifier... but some equipment is returned at end of battles see : EQUIPMENT_COMBAT_LOSS_FACTOR
	NDefines.NMilitary.LAND_COMBAT_ORG_DAMAGE_MODIFIER = 0.05       -- global damage modifier
	NDefines.NMilitary.LAND_AIR_COMBAT_STR_DAMAGE_MODIFIER = 0.02    -- air global damage modifier
	NDefines.NMilitary.LAND_AIR_COMBAT_MAX_PLANES_PER_ENEMY_WIDTH = 2 -- how many CAS/TAC can enter a combat depending on enemy width there
		
	NDefines.NMilitary.EXILE_ORG = 0.05							   -- Amount of org to keep
		
	NDefines.NMilitary.COMBAT_SUPPLY_LACK_ATTACKER_ATTACK = -0.85     -- attack combat penalty for attacker if out of supply
	NDefines.NMilitary.COMBAT_SUPPLY_LACK_ATTACKER_DEFEND = -0.35     -- defend combat penalty for attacker if out of supply
	NDefines.NMilitary.COMBAT_SUPPLY_LACK_DEFENDER_ATTACK = -0.75     -- attack combat penalty for defender if out of supply
	NDefines.NMilitary.COMBAT_SUPPLY_LACK_DEFENDER_DEFEND = -0.25     -- defend combat penalty for defender if out of supply

-- BMT Defines
	---- Military additions
	NDefines.NMilitary.DIVISION_SIZE_FOR_XP = 4                    -- how many battalions should a division have to count as a full divisions when calculating XP stuff
	NDefines.NMilitary.SPOTTING_QUALITY_DROP_HOURS = 3  	-- Each X hours the intel quality drops after unit was spotted.
	NDefines.NMilitary.MIN_SUPPLY_CONSUMPTION = 0.03 					-- minimum value of supply consumption that a unit can get
	NDefines.NMilitary.UNIT_EXPERIENCE_PER_COMBAT_HOUR = 0.00033 
	NDefines.NMilitary.UNIT_EXPERIENCE_SCALE = 0.30 
	NDefines.NMilitary.UNIT_EXPERIENCE_PER_TRAINING_DAY = 0.00270 
	NDefines.NMilitary.TRAINING_MAX_LEVEL = 4 
	NDefines.NMilitary.DEPLOY_TRAINING_MAX_LEVEL = 2 
	NDefines.NMilitary.TRAINING_EXPERIENCE_SCALE = 62.0 
	NDefines.NMilitary.TRAINING_ORG = 0.33 
	NDefines.NMilitary.ARMY_EXP_BASE_LEVEL = 3 
	NDefines.NMilitary.EXPERIENCE_COMBAT_FACTOR = 0.15 
	NDefines.NMilitary.UNIT_EXP_LEVELS = { 0.137,  0.225,  0.374,  0.452,  0.573,  0.681,  0.765,  0.879,  0.999 } 		-- Experience needed to progress to the next level
	NDefines.NMilitary.EXPEDITIONARY_FIELD_EXPERIENCE_SCALE = 0.66 		-- reduction factor in Xp from expeditionary forces
	NDefines.NMilitary.LEADER_EXPERIENCE_SCALE = 0.87 	
	NDefines.NMilitary.EXPERIENCE_LOSS_FACTOR = 0.17                  -- percentage of experienced solders who die when manpower is removed
	NDefines.NMilitary.EQUIPMENT_COMBAT_LOSS_FACTOR = 0.8 	 	       -- % of equipment lost to strength ratio in combat  so some % is returned if below 1
	NDefines.NMilitary.TRAINING_ATTRITION = 0.033 		  			   -- amount of extra attrition from being in training
	NDefines.NMilitary.REINFORCE_CHANCE = 0.033                  	   -- base chance to join combat from back line when empty
	NDefines.NMilitary.SPEED_REINFORCEMENT_BONUS = 0.011               -- chance to join combat bonus by each 100% larger than infantry base (up to 200%)
	NDefines.NMilitary.FLANKED_PROVINCES_COUNT = 5 					-- Attacker has to attack from that many provinces for the attack to be considered as flanking
	NDefines.NMilitary.MIN_DIVISION_DEPLOYMENT_TRAINING = 0.30 			-- Min level of division training	
	NDefines.NMilitary.FIELD_MARSHAL_ARMY_BONUS_RATIO = 0.7            -- ratio to apply regular bonuses FM bonuses to armies
	NDefines.NMilitary.FIELD_MARSHAL_XP_RATIO = 0.7					-- xp gain ratio for army group leaders
	NDefines.NMilitary.PARACHUTE_FAILED_EQUIPMENT_DIV = 30.0		   -- When the transport plane was shot down, we drop unit with almost NONE equipment
	NDefines.NMilitary.PARACHUTE_FAILED_MANPOWER_DIV = 60.0		   -- When the transport plane was shot down, we drop unit with almost NONE manpower
	NDefines.NMilitary.PARACHUTE_FAILED_STR_DIV = 7.0			   -- When the transport plane was shot down, we drop unit with almost NONE strenght
	NDefines.NMilitary.PARACHUTE_DISRUPTED_EQUIPMENT_DIV = 1.1   -- When the transport plane was hit, we drop unit with reduced equipment. Penalty is higher as more hits was received (and AA guns was in the state).
	NDefines.NMilitary.PARACHUTE_DISRUPTED_MANPOWER_DIV = 1.7	       -- When the transport plane was hit, we drop unit with reduced manpower. Penalty is higher as more hits was received (and AA guns was in the state).
	NDefines.NMilitary.PARACHUTE_DISRUPTED_STR_DIV = 2.1			   -- When the transport plane was hit, we drop unit with reduced strength. Penalty is higher as more hits was received (and AA guns was in the state).
	NDefines.NMilitary.PARACHUTE_PENALTY_RANDOMNESS = 0.3			   -- Random factor for str,manpower,eq penalties.
	NDefines.NMilitary.PARACHUTE_DISRUPTED_AA_PENALTY = 1            -- How much the Air defence in the state (from AA buildings level * air_defence) is scaled to affect overall disruption (equipment,manpower,str).
	NDefines.NMilitary.PARACHUTE_COMPLETE_ORG = 0.8				   -- Organisation value (in %) after unit being dropped, regardless if failed, disrupted, or successful.
	NDefines.NMilitary.PARACHUTE_ORG_REGAIN_PENALTY_DURATION = 72   -- penalty in org regain after being parachuted. Value is in hours.
	NDefines.NMilitary.PARACHUTE_ORG_REGAIN_PENALTY_MULT = -0.8	
	NDefines.NMilitary.LOW_SUPPLY = 0.8

	NDefines.NMilitary.UNIT_LEADER_ASSIGN_TRAIT_COST = 10.0 					-- cost to assign a new trait to a unit leader

-- ARR Defines
	--------------------------------------------------------------------------------------------------------------
	-- SUPPLY FLOW REWORK
	--------------------------------------------------------------------------------------------------------------

	NDefines.NSupply.VP_TO_SUPPLY_BASE = 0.45 -- Bonus to supply from a VP, no matter the level (Base is 0.2)
	NDefines.NSupply.AVAILABLE_MANPOWER_STATE_SUPPLY = 0.5 --Factor for state supply from max manpower (population) (Base is 0.18, this is PER MILLION.)
	NDefines.NSupply.VP_TO_SUPPLY_BONUS_CONVERSION = 0.05 -- Bonus to supply local supplies from Victory Points, multiplied by this aspect and rounded to closest integer (Base is 0.05)
	NDefines.NSupply.CAPITAL_INITIAL_SUPPLY_FLOW = 5.0 -- starting supply from
	NDefines.NSupply.CAPITAL_STARTING_PENALTY_PER_PROVINCE = 0.5 -- starting penalty that will be added as supply moves away from its origin (modified by stuff like terrain) (Default is 0.5)
	NDefines.NSupply.CAPITAL_ADDED_PENALTY_PER_PROVINCE = 1.2 -- added penalty as we move away from origin (Default is 1.2)

	-- defines that are used for supply reach for built nodes
	NDefines.NSupply.NODE_INITIAL_SUPPLY_FLOW = 2.8
	NDefines.NSupply.NODE_STARTING_PENALTY_PER_PROVINCE = 0.30 -- default is 0.5
	NDefines.NSupply.NODE_ADDED_PENALTY_PER_PROVINCE = 0.50 -- default is 0.7

	-- defines that are used for supply reach for dockyards
	NDefines.NSupply.NAVAL_BASE_INITIAL_SUPPLY_FLOW = 3.3
	NDefines.NSupply.NAVAL_BASE_STARTING_PENALTY_PER_PROVINCE = 0.84
	NDefines.NSupply.NAVAL_BASE_ADDED_PENALTY_PER_PROVINCE = 1.1


	NDefines.NCountry.REINFORCEMENT_DELIVERY_SPEED_MIN = 0.066	 
	NDefines.NCountry.REINFORCEMENT_EQUIPMENT_DELIVERY_SPEED = 0.066
	NDefines.NCountry.REINFORCEMENT_MANPOWER_DELIVERY_SPEED = 2.6	
	NDefines.NCountry.REINFORCEMENT_MANPOWER_CHUNK = 0.07					
	NDefines.NMilitary.REINFORCEMENT_REQUEST_MAX_WAITING_DAYS = 35
	NDefines.NMilitary.REINFORCEMENT_REQUEST_DAYS_FREQUENCY = 20   
	NDefines.NSupply.SUPPLY_PATH_MAX_DISTANCE = 70
	NDefines.NSupply.RAILWAY_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.65
	NDefines.NSupply.TRUCK_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.01
	NDefines.NSupply.NAVAL_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.06
	NDefines.NAI.DEPLOY_MIN_EQUIPMENT_SURRENDER_FACTOR = 0.8 

	NDefines.NSupply.RAILWAY_CONVERSION_COOLDOWN = 12
	NDefines.NSupply.RAILWAY_CONVERSION_COOLDOWN_CORE = 8
	NDefines.NSupply.RAILWAY_CONVERSION_COOLDOWN_CIVILWAR = 4

-- Frontline Ai Defines
	--------------------------------------------------------------------------------------------------------------
	-- RESEARCH
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.RESEARCH_DAYS_BETWEEN_WEIGHT_UPDATE = 1

	NDefines.NAI.RESEARCH_AHEAD_BONUS_FACTOR = 50.0

	NDefines.NAI.MAX_AHEAD_RESEARCH_PENALTY = 7
	NDefines.NAI.RESEARCH_BONUS_FACTOR = 50 				                       		-- To which extent AI should care about bonuses to research
	NDefines.NAI.XP_RATIO_REQUIRED_TO_RESEARCH_WITH_XP = 3.0		-- AI will at least need this amount of xp compared to cost of a tech to reserch it with XP			
	NDefines.NAI.RESEARCH_WITH_XP_AI_WEIGHT_MULT = 1.5 				-- AI will bump score of a research with this mult if it can use XP

	NDefines.NAI.RESEARCH_NAVAL_DOCTRINE_NEED_GAIN_FACTOR = 0.075 -- Multiplies value based on relative naval industry size / country size.

	NDefines.NAI.RESEARCH_NEW_WEIGHT_FACTOR = 0.5 			-- Impact of previously unexplored tech weights. Higher means more random exploration.
	NDefines.NAI.RESEARCH_AHEAD_OF_TIME_FACTOR = 1.5 		-- To which extent AI should care about ahead of time penalties to research
	NDefines.NAI.RESEARCH_BASE_DAYS = 60					-- AI adds a base number of days when weighting completion time for techs to ensure it doesn't only research quick techs

	NDefines.NAI.RESEARCH_YEARS_BEHIND_FACTOR = 0.3 -- (was 0.2) --To which extent AI should care about not falling behind (i.e. increase weight for old tech)

	NDefines.NAI.RESEARCH_LAND_DOCTRINE_NEED_GAIN_FACTOR = 0.12 -- Multiplies value based on relative military industry size / country size.

	--------------------------------------------------------------------------------------------------------------
	-- DESIGNS
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_LAND = 20 --50	-- Army XP needed before attempting to create a variant of a type that uses the tank designer (the tank designer DLC feature must be active).
	NDefines.NAI.DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_NAVY = 20 --50	-- Same as above but for the ship designer.
	NDefines.NAI.DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_AIR = 20 --25	-- Same as above but for the air designer.

	NDefines.NAI.VARIANT_CREATION_XP_RESERVE_LAND = 30 --50					-- If the AI lacks army XP to create a variant it will reserve this much XP for variant creation so that it will eventually be able to create a variant.
	NDefines.NAI.VARIANT_CREATION_XP_RESERVE_NAVY = 30 --50					-- Same as above but for navy XP.
	NDefines.NAI.VARIANT_CREATION_XP_RESERVE_AIR  = 30 --50					-- Same as above but for air XP.

	-- The AI uses the below values when selecting which design to make among the types that use the tank designer
	-- (the tank designer DLC feature must be active). For each role, the highest priority AI design that can be
	-- created, if any, is assigned a weight. Any design with a weight of zero or a weight that falls below the
	-- cutoff is dropped. A random design is then picked from the remaining.
	-- Weight is calculated as AlternativeFactor * DemandFactor.
	-- An "alternative" is a producible design of the same archetype (each specialized type is its own archetype).

	-- EAI: AI delays upgrading the main tank types too much because it wants to create absent types for its templates first
	-- makes sense but I'd rather have it get its most used type upgraded first
	NDefines.NAI.LAND_DESIGN_ALTERNATIVE_ABSENT = 1 --1000000
	NDefines.NAI.LAND_DESIGN_ALTERNATIVE_OF_LESSER_TECH = 1 --10000
	NDefines.NAI.LAND_DESIGN_ALTERNATIVE_OF_EQUAL_TECH = 1 --100
	NDefines.NAI.LAND_DESIGN_ALTERNATIVE_OF_GREATER_TECH = 1

	-- If a template may be reinforced with the archetype it's considered to be "demanded". If multiple conditions
	-- are met, e.g. it's both in the field and in training, the largest value is used.

	NDefines.NAI.LAND_DESIGN_DEMAND_FIELD_DIVISION = 45
	NDefines.NAI.LAND_DESIGN_DEMAND_TRAINING_DIVISION = 30
	NDefines.NAI.LAND_DESIGN_DEMAND_GARRISON_DIVISION = 15
	NDefines.NAI.LAND_DESIGN_DEMAND_UNUSED_TEMPLATE = 0 --1
	NDefines.NAI.LAND_DESIGN_DEMAND_ABSENT = 0 --0


	-- If a design with a weight when divided by the largest weight falls below this value it's excluded from the
	-- selection. Valid values are in the range [0, 1] inclusive.

	NDefines.NAI.LAND_DESIGN_CUTOFF_AS_PERCENTAGE_OF_MAX = 0.01 --0.25

	-- The AI "desires" to spend XP on doctrines, templates, and equipment.
	-- The desire is built up over time and when XP is available it spends it on the action that has the highest accumulated desire. After spending XP the desire is reset, in effect balancing the desires.
	-- Below is the daily desire gain for each action.


	NDefines.NAI.DESIRE_USE_XP_TO_UNLOCK_LAND_DOCTRINE = 10.0  ---0.5    -- How quickly is desire to unlock land doctrines accumulated?
	NDefines.NAI.DESIRE_USE_XP_TO_UNLOCK_NAVAL_DOCTRINE = 0.5  ---1   -- How quickly is desire to unlock naval doctrines accumulated?
	NDefines.NAI.DESIRE_USE_XP_TO_UNLOCK_AIR_DOCTRINE = 0.5  ---1     -- How quickly is desire to unlock air doctrines accumulated?

	--EAI: make sure land template desire is always at the top, if the doctrine desire is high but the mod blocks it, AI wont create templates
	NDefines.NAI.DESIRE_USE_XP_TO_UPDATE_LAND_TEMPLATE = 100.0    -- How quickly is desire to update/create templates accumulated?

	NDefines.NAI.DESIRE_USE_XP_TO_UPGRADE_LAND_EQUIPMENT = 50.0  -- How quickly is desire to update/create land equipment variants accumulated?
	NDefines.NAI.DESIRE_USE_XP_TO_UPGRADE_NAVAL_EQUIPMENT = 1.0  --100.0 -- How quickly is desire to update/create naval equipment variants accumulated?
	NDefines.NAI.DESIRE_USE_XP_TO_UPGRADE_AIR_EQUIPMENT = 100.0   -- How quickly is desire to update/create air equipment variants accumulated?

	NDefines.NAI.DESIRE_USE_XP_TO_UNLOCK_ARMY_SPIRIT = 0.4    -- How quickly is desire to unlock army spirits accumulated?
	NDefines.NAI.DESIRE_USE_XP_TO_UNLOCK_NAVY_SPIRIT = 0.4   -- How quickly is desire to unlock naval spirits accumulated?
	NDefines.NAI.DESIRE_USE_XP_TO_UNLOCK_AIR_SPIRIT = 0.4     -- How quickly is desire to unlock air spirits accumulated?

	NDefines.NAI.DAYS_BETWEEN_CHECK_BEST_DOCTRINE = 7       -- Recalculate desired best doctrine to unlock with this many days inbetween.
	NDefines.NAI.DAYS_BETWEEN_CHECK_BEST_TEMPLATE = 7       -- Recalculate desired best template to upgrade with this many days inbetween.
	NDefines.NAI.DAYS_BETWEEN_CHECK_BEST_EQUIPMENT = 7      -- Recalculate desired best equipment to upgrade with this many days inbetween.

	NDefines.NAI.GARRISON_TEMPLATE_SCORE_IC_FACTOR = 1.0 -- ai uses these defines while calculating garrison template score of a template.
	NDefines.NAI.GARRISON_TEMPLATE_SCORE_MANPOWER_FACTOR = 0.05 -- formula is (template_ic * ic_factor + template_manpower * manpower_factor ) / template_supression (lower is better)

	---------------

	NDefines.NAI.REFIT_SHIP_RELUCTANCE = 5000							-- How often to consider refitting to new equipment variants for ships in the field
	NDefines.NAI.REFIT_SHIP_PERCENTAGE_OF_FORCES = 0.3				-- How big part of the navy that should be considered for refitting

	NDefines.NAI.UPGRADE_PERCENTAGE_OF_FORCES = 1.0   --0.35 --0.1
	NDefines.NAI.UPGRADES_DEFICIT_LIMIT_DAYS = 60 --180                           -- Ai will avoid upgrading units in the field to new templates if it takes longer than this to fullfill their equipment need

	--------------------------------------------------------------------------------------------------------------
	-- DIVISION PRODUCTION
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.DEPLOYED_UNIT_MANPOWER_RATIO_TO_BUFFER_WARTIME = 0.2 				-- deployment will try to buffer a ratio of deployed manpower (for reinforcements) during war time
	NDefines.NAI.DEPLOYED_UNIT_MANPOWER_RATIO_TO_BUFFER_PEACETIME = 0.1     		-- deployment will try to buffer a ratio of deployed manpower (for reinforcements) during peace time

	NDefines.NAI.MANPOWER_RATIO_REQUIRED_TO_PRIO_MOBILIZATION_LAW = 0.4		-- percentage of manpower in field is desired to be buffered for AI when it has upcoming wars or already at war. if it has less manpower, it will prio manpower laws

	-- Calculating wanted nr of divisions
	NDefines.NAI.WANTED_UNITS_INDUSTRY_FACTOR = 5                        -- How many units a country wants is partially based on how much military industry that is available
	NDefines.NAI.WANTED_UNITS_THREAT_BASE = 0.7                             -- If no threat, multiply min wanted units by this
	NDefines.NAI.WANTED_UNITS_THREAT_MAX = 25.0                             -- Normalized threat is clamped to this
	NDefines.NAI.WANTED_UNITS_WAR_THREAT_FACTOR = 1.5                       -- Factor threat with this if country is at war. this value is overriden by the value in ideology database if that value exceedes this.
	NDefines.NAI.WANTED_UNITS_DANGEROUS_NEIGHBOR_FACTOR = 1.25              -- Factor if has dangerous neighbor
	NDefines.NAI.WANTED_UNITS_MANPOWER_DIVISOR = 22000                      -- Normalizing divisor for AI manpower. (for each x max available manpower, they want one division)
	NDefines.NAI.WANTED_UNITS_WEIGHT_FRONTS_WANT = 1                      -- Weight of front needs when computing final nr wanted units
	NDefines.NAI.WANTED_UNITS_WEIGHT_FACTORIES = 1                        -- Weight of military factories when computing final nr wanted units
	NDefines.NAI.WANTED_UNITS_WEIGHT_MANPOWER = 1                         -- Weight of manpower availability when computing final nr wanted units
	NDefines.NAI.WANTED_UNITS_MIN_DEFENCE_FACTOR = 0.4						-- Factor on units required for min defence
	-- End of calculating wanted nr of divisions

	NDefines.NAI.MIN_FIELD_STRENGTH_TO_BUILD_UNITS = 0.8 --0.7			            -- Cancel unit production if below this to get resources out to units in the field
	NDefines.NAI.MIN_MANPOWER_TO_BUILD_UNITS = 0.85 --0.7					        -- Cancel unit production if below this to get resources out to units in the field

	NDefines.NAI.DEPLOY_MIN_TRAINING_SURRENDER_FACTOR = 0.5		-- Required percentage of training (1.0 = 100%) for AI to deploy unit in wartime while surrender progress is higher than 0 
	NDefines.NAI.DEPLOY_MIN_EQUIPMENT_SURRENDER_FACTOR = 0.8	-- Required percentage of equipment (1.0 = 100%) for AI to deploy unit in wartime while surrender progress is higher than 0 
	NDefines.NAI.DEPLOY_MIN_TRAINING_PEACE_FACTOR = 0.4		-- Required percentage of training (1.0 = 100%) for AI to deploy unit in peacetime
	NDefines.NAI.DEPLOY_MIN_EQUIPMENT_PEACE_FACTOR = 0.9	-- Required percentage of equipment (1.0 = 100%) for AI to deploy unit in peacetime
	NDefines.NAI.DEPLOY_MIN_TRAINING_WAR_FACTOR = 1		-- Required percentage of training (1.0 = 100%) for AI to deploy unit in wartime
	NDefines.NAI.DEPLOY_MIN_EQUIPMENT_WAR_FACTOR = 0.9		-- Required percentage of equipment (1.0 = 100%) for AI to deploy unit in wartime
	NDefines.NAI.DEPLOY_MIN_EQUIPMENT_CAP_DEPLOY_FACTOR = 0.85 -- If training is capped by equipment deficit and we have reached that cap, deploy unit anyway if percentage is above this (reinforce in field instead).

	NDefines.NAI.UPGRADE_DIVISION_RELUCTANCE = 3 -- aggressively trying to get the AI to upgrade divisions to newer templates, may work, may not, but it doesn't break anything. vanilla is 14, .0042 is just over 1 hour, where I believe the vanilla value at 14 = 14 days. So it should be checking to upgrade ONE division every single hour. 

	--------------------------------------------------------------------------------------------------------------
	-- EQUIPMENT PRODUCTION
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.PRODUCTION_EQUIPMENT_SURPLUS_FACTOR = 0.8 -- [0.4] -- Base value for how much of currently used equipment the AI will at least strive to have in stock

	NDefines.NAI.SHIPS_PRODUCTION_BASE_COST = 1
	NDefines.NAI.NEEDED_NAVAL_FACTORIES_EXPENSIVE_SHIP_BONUS = 1000
	NDefines.NAI.PRODUCTION_MAX_PROGRESS_TO_SWITCH_NAVAL = 0.001 -- temp fix
	NDefines.NAI.PRODUCTION_WAIT_TO_FINISH_IF_EXPENSIVE = 0.25
	NDefines.NAI.PRODUCTION_WAIT_TO_FINISH_IF_CHEAP = 0.75

	NDefines.NAI.NAVAL_DOCKYARDS_SHIP_FACTOR = 1000			-- The extent to which number of dockyards play into amount of sips a nation wants
	NDefines.NAI.NAVAL_BASES_SHIP_FACTOR = 1000				-- The extent to which number of naval bases play into amount of sips a nation wants
	NDefines.NAI.NAVAL_STATES_SHIP_FACTOR = 1000			-- The extent to which number of states play into amount of sips a nation wants

	NDefines.NAI.PRODUCTION_UNAVAILABLE_RESORCE_FACTORY_FACTOR = 0.5

	NDefines.NAI.RAILWAY_GUN_PRODUCTION_BASE_DIVISIONS_RATIO_PERCENT = 5
	NDefines.NAI.RAILWAY_GUN_PRODUCTION_MIN_DIVISONS = 100
	NDefines.NAI.RAILWAY_GUN_PRODUCTION_MIN_FACTORIES = 50

	--------------------------------------------------------------------------------------------------------------
	-- FUEL
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_ARMY_MAX_CONSUMPTION = 365  -- AI will try to buffer at least this amount of days on max consumption, will trade if necesarry and will go into fuel saving mode/aggresive mode using this buffer 
	NDefines.NAI.WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_AIR_MAX_CONSUMPTION  = 365  -- AI will try to buffer at least this amount of days on max consumption, will trade if necesarry and will go into fuel saving mode/aggresive mode using this buffer
	NDefines.NAI.WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_NAVY_MAX_CONSUMPTION = 365  -- AI will try to buffer at least this amount of days on max consumption, will trade if necesarry and will go into fuel saving mode/aggresive mode using this buffer

	--------------------------------------------------------------------------------------------------------------
	-- DIPLOMACY
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.DIPLOMACY_SEND_MAX_FACTION = 0.0
	NDefines.NAI.MAX_REQUEST_EXPEDITIONARIES_ARMY_RATIO = 0.0

	NDefines.NAI.GENERATE_WARGOAL_THREAT_BASELINE = 0.6

	NDefines.NAI.DIPLOMACY_REJECTED_WAIT_MONTHS_BASE = 1	-- AI will not repeat offers until at least this time has passed, and at most the double

	-- NDefines.NAI.SEND_VOLUNTEER_EVAL_BASE_DISTANCE = 175.0  -- How far away it will evaluate sending volunteers if not a major power
	-- NDefines.NAI.SEND_VOLUNTEER_EVAL_MAJOER_POWER = 1.0 	-- How willing major powers are to send volunteers.
	-- NDefines.NAI.SEND_VOLUNTEER_EVAL_CONTAINMENT_FACTOR = 0.9 -- How much AI containment factors into its evaluation of sending volunteers.

	NDefines.NAI.MAX_VOLUNTEER_ARMY_FRACTION = 0.025			-- Countries will not send more than their forces time this number to aid another country
	NDefines.NAI.DIPLO_PREFER_OTHER_FACTION = -400		-- The country has yet to ask some other faction it would prefer to be a part of.
	NDefines.NDiplomacy.NOT_READY_FOR_WAR_BASE = -500 -- AI should be unwilling to enter accept a call to war if not ready ---for war against the relevant enemies. vanilla -50 - suggested define by SensitiveDannyBoi

	---------------Diplo Stuff---------------

	NDefines.NAI.SEND_VOLUNTEER_AIDESIRE_SAME_IDEOLOGY = 10000					-- Added to AI desire to send volunteers if recipent is same ideology (and AI can't declare war on recipient)
	NDefines.NAI.SEND_VOLUNTEER_AIDESIRE_SAME_IDEOLOGY_CIVIL_WAR = 15000		-- Added to AI desire to send volunteers if recipent is same ideology and they are currently in civil war
	NDefines.NAI.SEND_VOLUNTEER_EVAL_BASE_DISTANCE = 42000  -- How far away it will evaluate sending volunteers if not a major power
	NDefines.NAI.SEND_VOLUNTEER_EVAL_MAJOER_POWER = 1000.0 	-- How willing major powers are to send volunteers.
	NDefines.NAI.SEND_VOLUNTEER_EVAL_CONTAINMENT_FACTOR = 0.1 -- How much AI containment factors into its evaluation of sending volunteers.

	---------------Diplo Stuff End---------------
	--------------------------------------------------------------------------------------------------------------
	-- PP
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.NEW_LEADER_EXTRA_PP_FACTOR = 1 --2.0								 -- Country must have at least this many times extra PP to get new admirals or army leaders

	NDefines.NAI.DIPLOMACY_IMPROVE_RELATION_COST_FACTOR = 7.0                       -- Desire to boost relations subtracts the cost multiplied by this

	NDefines.NAI.COMMAND_POWER_BEFORE_SPEND_ON_TRAITS = 65.0

	--------------------------------------------------------------------------------------------------------------
	-- LAND AI
	--------------------------------------------------------------------------------------------------------------

	-- NDefines.NAI.MIN_AI_UNITS_PER_TILE_FOR_STANDARD_COHESION = 20.0		-- 1.0				-- How many units should we have for each tile along a front in order to switch to standard cohesion (less moving around)
	-- NDefines.NAI.MIN_FRONT_SIZE_TO_CONSIDER_STANDARD_COHESION = 1000	-- 1.4				-- How long should fronts be before we consider switching to standard cohesion (under this, standard cohesion fronts will switch back to relaxed)

	NDefines.NAI.MAIN_ENEMY_FRONT_IMPORTANCE = 4.8			-- How much extra focus the AI should put on who it considers to be its current main enemy.

	NDefines.NAI.LAND_DEFENSE_SUPPLY_HUB_IMPORTANCE = 8

	NDefines.NAI.ASSIGN_TANKS_TO_WAR_FRONT = 10.0 -- Vanilla 6.0
	NDefines.NAI.ASSIGN_TANKS_TO_NON_WAR_FRONT = 0.1 -- Vanilla 0.4

	NDefines.NAI.UPDATE_SUPPLY_MOTORIZATION_FREQUENCY_HOURS = 20 				-- Vanilla is 52  Check if activating motorization would improve supply situation this often.

	NDefines.NAI.FRONT_UNITS_CAP_FACTOR = 10.0								-- A factor applied to total front size and supply use. Primarily effects small fronts

	NDefines.NAI.AREA_DEFENSE_CIVIL_WAR_IMPORTANCE = 5.0				-- Area defense order importance value when a country is in a civil war as target or revolter. vanilla 10000 lolwut?? am I missing something here :

	NDefines.NAI.SCARY_LEVEL_AVERAGE_DEFENSE = -0.6                               -- average front defense modifier to make it consider it as a PITA to go for
	NDefines.NAI.ATTACK_HEAVILY_DEFENDED_LIMIT = 0.55 			                -- AI will not launch attacks against heavily defended fronts unless they consider to have this level of advantage (1.0 = 100%)

	NDefines.NAI.CANCEL_COMBAT_DISADVANTAGE_RATIO = 1.25	-- Vanilla 1.5                     -- If the enemy's advantage ratio over us during (normal) combat is more than <value>, allow canceling the attack
	NDefines.NAI.CANCEL_COMBAT_MIN_DURATION_HOURS = 24	-- Vanilla 48 						-- Only allow canceling (normal) combat if at least <value> hours have passed
	NDefines.NAI.CANCEL_INVASION_COMBAT_DISADVANTAGE_RATIO = 2.8	-- Vanilla 3.5 			-- If the enemy's advantage ratio over us during invasion combat is more than <value>, allow canceling the attack
	NDefines.NAI.CANCEL_INVASION_COMBAT_MIN_DURATION_HOURS = 72	-- Vanilla 120			-- Only allow canceling invasion combat if at least <value> hours have passed

	NDefines.NAI.MAX_MICRO_ATTACKS_PER_ORDER = 10 				                    -- AI goes through its orders and checks if there are situations to take advantage of
	NDefines.NAI.MICRO_POCKET_SIZE = 5					-- Pockets with a size equal to or lower than this will be mocroed by the AI, for efficiency.

	NDefines.NAI.REDEPLOY_DISTANCE_VS_ORDER_SIZE = 0.9 			                -- Factor applied to the path length of a unit compared to length of an order to determine if it should use strategic redeployment
	NDefines.NAI.UNIT_ASSIGNMENT_TERRAIN_IMPORTANCE = 18.0 		                -- Terrain score for units are multiplied by this when the AI is deciding which front they should be assigned to
	NDefines.NAI.ENTRENCHMENT_WEIGHT = 3.5						                -- AI should favour units with less entrenchment when assigning units around.

	NDefines.NAI.AI_FRONT_MOVEMENT_FACTOR_FOR_READY = 0.10 				-- Vanilla 0.25			                -- If less than this fraction of units on a front is moving  AI sees it as ready for action

	NDefines.NAI.FRONT_TERRAIN_DEFENSE_FACTOR = 7.0			-- Multiplier applied to unit defense modifier for terrain on front province multiplied by terrain importance
	NDefines.NAI.FRONT_TERRAIN_ATTACK_FACTOR = 7.0			-- Multiplier applied to unit attack modifier for terrain on enemy front province multiplied by terrain importance
	NDefines.NAI.FRONT_CUTOFF_MIN_EDGE_PROXIMITY = 1								-- Minimum number of provinces to the front edge to determine for cutoff oportunity.

	-- these are all 3 numbers for min, desired, max unit need weights for area defense
	NDefines.NAI.AREA_DEFENSE_CAPITAL_PEACE_VP_WEIGHT = { 1.0, 1.0, 1.0 }
	NDefines.NAI.AREA_DEFENSE_CAPITAL_VP_WEIGHT = { 0.0, 1.0, 2.0 }
	NDefines.NAI.AREA_DEFENSE_HOME_VP_WEIGHT = { 0.0, 0.5, 1.0 }
	NDefines.NAI.AREA_DEFENSE_OTHER_VP_WEIGHT = { 0.0, 0.0, 1.0 }

	NDefines.NAI.AREA_DEFENSE_CAPITAL_PEACE_COAST_WEIGHT = { 0.0, 0.0, 0.0 }
	NDefines.NAI.AREA_DEFENSE_CAPITAL_COAST_WEIGHT = { 0.0, 0.2, 0.7 }
	NDefines.NAI.AREA_DEFENSE_HOME_COAST_WEIGHT = { 0.0, 0.1, 0.5 }
	NDefines.NAI.AREA_DEFENSE_OTHER_COAST_WEIGHT = { 0.0, 0.0, 0.0 }

	NDefines.NAI.AREA_DEFENSE_CAPITAL_PEACE_BASE_WEIGHT = { 0.0, 0.0, 0.0 }
	NDefines.NAI.AREA_DEFENSE_CAPITAL_BASE_WEIGHT = { 0.5, 1.0, 1.5 }
	NDefines.NAI.AREA_DEFENSE_HOME_BASE_WEIGHT = { 0.5, 1.0, 1.0 }
	NDefines.NAI.AREA_DEFENSE_OTHER_BASE_WEIGHT = { 0.5, 0.5, 1.0 }

	NDefines.NAI.PLAN_ATTACK_MIN_ORG_FACTOR_LOW = 0.75				            -- Minimum org % for a unit to actively attack an enemy unit when executing a plan
	NDefines.NAI.PLAN_ATTACK_MIN_STRENGTH_FACTOR_LOW = 0.75 --0.4			        -- Minimum strength for a unit to actively attack an enemy unit when executing a plan

	NDefines.NAI.PLAN_ATTACK_MIN_ORG_FACTOR_MED = 0.65							-- (LOW,MED,HIGH) corresponds to the plan execution agressiveness level.
	NDefines.NAI.PLAN_ATTACK_MIN_STRENGTH_FACTOR_MED = 0.65	

	NDefines.NAI.PLAN_ATTACK_MIN_ORG_FACTOR_HIGH = 0.5		
	NDefines.NAI.PLAN_ATTACK_MIN_STRENGTH_FACTOR_HIGH = 0.5	

	NDefines.NAI.PLAN_FACTION_STRONG_TO_EXECUTE = 0.65 --0.80	--0.60		        -- % or more of units in an order to consider ececuting the plan
	NDefines.NAI.PLAN_FACTION_NORMAL_TO_EXECUTE = 0.65  --0.50
	NDefines.NAI.PLAN_FACTION_WEAK_TO_ABORT = 0.50  --0.35 		0.65		        -- % or more of units in an order to consider ececuting the plan
	NDefines.NAI.PLAN_VALUE_TO_EXECUTE = -0.6      -- Vanilla -0.5                                     -- AI will typically avoid carrying out a plan it below this value (0.0 is considered balanced).
	NDefines.NAI.PLAN_AVG_PREPARATION_TO_EXECUTE = 0.4				            -- % or more average plan preparation before executing

	NDefines.NAI.MIN_PLAN_VALUE_TO_MICRO_INACTIVE = -0.35			--0.1 --default 0.2				-- The AI will not consider members of groups which plan is not activated AND evaluates lower than this.
	NDefines.NAI.FORTIFIED_RATIO_TO_CONSIDER_A_FRONT_FORTIFIED = 0.3
	NDefines.NAI.HEAVILY_FORTIFIED_RATIO_TO_CONSIDER_A_FRONT_FORTIFIED = 0.3

	NDefines.NAI.PLAN_ACTIVATION_SUPERIORITY_AGGRO = 1.75 --default 1.0		-- How aggressive a country is in activating a plan based on how superiour their force is.

	NDefines.NAI.DYNAMIC_STRATEGIES_THREAT_FACTOR = 6.0
	NDefines.NAI.BASE_DISTANCE_TO_CARE = 400.0

	NDefines.NAI.ASSIGN_MOUNTAINEERS_TO_MOUNTAINS = 50.0
	NDefines.NAI.ASSIGN_TANKS_TO_MOUNTAINS = -50
	NDefines.NAI.ASSIGN_TANKS_TO_JUNGLE	= -100
	NDefines.NAI.DIVISION_SUPPLY_RATIO_TO_MOTORIZE = 0.99	-- Vanilla is 0.8  If supply ratio is less than this, consider motorizing any applicable nearby supply hub		

	-- NDefines.NAI.ORG_UNIT_STRONG = 0.75		-- Vanilla 0.75										-- Organization % for unit to be considered strong
	-- NDefines.NAI.STR_UNIT_STRONG = 0.75		-- Vanilla 0.70									-- Strength (equipment) % for unit to be considered strong
	-- NDefines.NAI.ORG_UNIT_NORMAL = 0.60		-- Vanilla 0.35 												-- Organization % for unit to be considered normal
	-- NDefines.NAI.STR_UNIT_NORMAL = 0.60		-- Vanilla 0.40 											-- Strength (equipment) % for unit to be considered normal
	-- NDefines.NAI.ORG_UNIT_WEAK = 0.45		-- Vanilla 0.25 												-- Organization % for unit to be considered weak
	-- NDefines.NAI.STR_UNIT_WEAK = 0.40		-- Vanilla 0.30 												-- Organization % for unit to be considered weak

	-- Garrison AI
	NDefines.NAI.AREA_DEFENSE_SETTING_VP = false								-- Vanilla is false
	NDefines.NAI.AREA_DEFENSE_SETTING_PORTS = true								-- Vanilla is true
	NDefines.NAI.AREA_DEFENSE_SETTING_AIRBASES = false							-- Vanilla is false
	NDefines.NAI.AREA_DEFENSE_SETTING_BORDERS = false							-- Vanilla is false
	NDefines.NAI.AREA_DEFENSE_SETTING_FORTS = false								-- Vanilla is false
	NDefines.NAI.AREA_DEFENSE_SETTING_COASTLINES = false						        -- Vanilla is true
	NDefines.NAI.AREA_DEFENSE_SETTING_RAILWAYS = false							-- Vanilla is false
	NDefines.NAI.AREA_DEFENSE_SETTING_FACILITY = false							-- Vanilla is false                  

	--------------------------------------------------------------------------------------------------------------
	-- NAVY AI
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.ESTIMATED_CONVOYS_PER_DIVISION = 18			-- Not always correct, but mainly used to make sure AI does not go crazy vanilla 6
	NDefines.NAI.NAVAL_MISSION_INVASION_BASE = 30000					-- Base score for region with naval invasion (modified dynamically by prioritizing orders)

	NDefines.NAI.MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING = 0.10 -- maximum ratio of screens forces to be used in mine sweeping

	NDefines.NAI.MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO_MAX_MINES = 250 -- highest mines for highest prio for mine missions

	NDefines.NAI.MAX_SCREEN_TASKFORCES_FOR_MINE_LAYING = 0.05 -- maximum ratio of screens forces to be used in mine laying

	NDefines.NAI.NAVY_PREFERED_MAX_SIZE = 50										-- AI will generally attempt to merge fleets into this size but as a soft limit.

	NDefines.NAI.DOCKYARDS_PER_NAVAL_DESIRE_EFFECT = -100.0

	NDefines.NAI.MIN_CAPITALS_FOR_CARRIER_TASKFORCE = 12
	NDefines.NAI.CAPITALS_TO_CARRIER_RATIO = 3
	NDefines.NAI.SCREENS_TO_CAPITAL_RATIO = 6.0

	NDefines.NAI.CAPITAL_TASKFORCE_MAX_CAPITAL_COUNT = 6 		-- optimum capital count for capital taskforces
	NDefines.NAI.SCREEN_TASKFORCE_MAX_SHIP_COUNT = 8			-- optimum screen count for screen taskforces
	NDefines.NAI.SUB_TASKFORCE_MAX_SHIP_COUNT = 10 				-- optimum sub count for sub taskforces

	NDefines.NAI.MIN_NAVAL_MISSION_PRIO_TO_ASSIGN = {  -- priorities for regions to get assigned to a mission
	0, -- HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)
	200, -- PATROL		
	200, -- STRIKE FORCE 
	200, -- CONVOY RAIDING
	100, -- CONVOY ESCORT
	200, -- MINES PLANTING	
	100, -- MINES SWEEPING	
	0, -- TRAIN
	0, -- RESERVE_FLEET
	100, -- NAVAL INVASION SUPPORT
	}

	NDefines.NAI.HIGH_PRIO_NAVAL_MISSION_SCORES = {  -- priorities for regions to get assigned to a mission
	0, -- HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)
	100000, -- PATROL 	
	1000, -- STRIKE FORCE 
	1500, -- CONVOY RAIDING
	1000, -- CONVOY ESCORT
	-1, -- MINES PLANTING	
	300, -- MINES SWEEPING	
	0, -- TRAIN
	0, -- RESERVE_FLEET
	1000, -- NAVAL INVASION SUPPORT
	}

	NDefines.NAI.MAX_MISSION_PER_TASKFORCE = {  -- max mission region/taskforce ratio
	0, -- HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)
	2, -- PATROL
	4, -- STRIKE FORCE
	5, -- CONVOY RAIDING
	4, -- CONVOY ESCORT
	2, -- MINES PLANTING
	2, -- MINES SWEEPING
	0, -- TRAIN
	0, -- RESERVE_FLEET
	10, -- NAVAL INVASION SUPPORT
	}

	-------------------------
	-- naval invasions
	-------------------------

	NDefines.NAI.MIN_INVASION_AREA_SIZE_FOR_FLOATING_HARBORS = 1   -- AI will consider using floating harbors for naval invasion if invasion area is larger than this many provinces
	NDefines.NAI.MAX_DISTANCE_NAVAL_INVASION = 400.0				-- AI is extremely unwilling to plan naval invasions above this naval distance limit.

	NDefines.NAI.INVASION_TARGET_DISTANCE_DENOMINATOR = 500	-- Vanilla 1000            -- When selecting invasion target, divide this with (pixel) distance to get distance score factor. (Doesn't really affect the relative scoring, but it affects the linearity of the score function.)
	NDefines.NAI.INVASION_TARGET_NO_PORT_FACTOR = 0.1	-- Vanilla 0.3                   -- When selecting invasion target, multiply score with this if the target has no port
	NDefines.NAI.INVASION_TARGET_TRUNCATION_SELECT_THRESHOLD = 0.8	-- Vanilla 0.6      -- When selecting invasion target, use this threshold for truncation selection. (1.0 means select highest scored target, 0.0 means select randomly from all possible target, 0.5 means select randomly from all targets with more than 50 % of highest score)
	NDefines.NAI.INVASION_TARGET_PRIO_NOT_ENEMY_FACTOR = 0.15	-- Vanilla 0.17           -- When calculating priority for an invasion, factor the score with this if the target is not an actual enemy.

	NDefines.NAI.FAILED_INVASION_AREA_PRIO_FACTOR = 0.25 ---for every failed invasion on an area, factor that area's invasion prio with this value	
	NDefines.NAI.FAILED_INVASION_PORT_PRIO_FACTOR = 0.33 ---for every failed invasion on a target port (province), factor the chance that we try to invade that same port again (relative to other ports)

	NDefines.NAI.MIN_INVASION_PLAN_VALUE_TO_EXECUTE = 0.3				-- ai will only activate invasions if it is above this
	NDefines.NAI.MIN_INVASION_ORG_FACTOR_TO_EXECUTE = 0.8				-- ai will only activate invasions if average org factor is above this

	NDefines.NAI.ENEMY_NAVY_STRENGTH_DONT_BOTHER = 2							-- If the enemy has a navy at least these many times stronger that the own, don't bother invading
	NDefines.NAI.RELATIVE_STRENGTH_TO_INVADE = 0.1 ---0.08			-- Compares the estimated strength of the country/faction compared to it's enemies to see if it should invade or stay at home to defend.
	NDefines.NAI.RELATIVE_STRENGTH_TO_INVADE_DEFENSIVE = 0.5 ---0.4	-- Compares the estimated strength of the country/faction compared to it's enemies to see if it should invade or stay at home to defend, but while being a defensive country.

	NDefines.NAI.MAX_UNIT_RATIO_FOR_INVASIONS = 0.35									-- countries won't use armies more than this ratio of total units for invasions
	NDefines.NAI.MAX_INVASION_FRONT_SCORE = 2400										-- max score for naval invasion front scores
	NDefines.NAI.MIN_FRONT_SCORE_FOR_AFTER_INVASION_AREAS = 1800						-- min score for army fronts that are created on recently invaded regions
	NDefines.NAI.INVASION_COASTAL_PROVS_PER_ORDER = 28									-- AI will consider one extra invasion per number of provinces stated here (num orders = total coast / this)
	NDefines.NAI.NAVAL_INVADED_AREA_PRIO_DURATION = 270									-- after successful invasion, AI will prio the enemy area for this number of days
	NDefines.NAI.NAVAL_INVADED_AREA_PRIO_MULT = 2.0										-- fronts that belongs to recent invasions gets more prio
	NDefines.NAI.MIN_NUM_CONQUERED_PROVINCES_TO_DEPRIO_NAVAL_INVADED_FRONTS = 30		-- if you conquer this amount of provinces after a naval invasion, it will lose its prio status and will act as a regular front
	NDefines.NAI.MAX_INVASION_SIZE = 24	

	-------------------------
	-- convoy escorts
	-------------------------

	NDefines.NAI.REGION_THREAT_LEVEL_TO_BLOCK_REGION = 25 * 200		-- How much threat must be generated in region ( by REGION_THREAT_PER_SUNK_CONVOY ) so the AI will decide to mark the region as avoid
	NDefines.NAI.REGION_CONVOY_DANGER_DAILY_DECAY = 2				-- When convoys are sunk it generates threat in the region which the AI uses to prio nalval missions

	NDefines.NAI.CONVOY_ESCORT_MUL_FROM_NO_CONVOYS = 0 -- score multiplier when no convoys are around

	NDefines.NAI.MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MIN = 0.40 --0.20 -- maximum ratio of all screen-ships forces to be used in convoy defense (increases up to max as AI loses convoys).
	NDefines.NAI.MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MAX = 0.6 --0.70 -- maximum ratio of all screen-ships forces to be used in convoy defense (increases up to max as AI loses convoys).
	NDefines.NAI.MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MAX_CONVOY_THREAT = 500 -- 1500 -- AI will increase screen assignment for escort missions as threate increases

	-------------------------
	-- convoy raiding
	-------------------------

	NDefines.NAI.CONVOY_RAID_SCORE_FROM_CONVOY_INTELLIGENCE = 5  --2.5			 -- each convoy intelligenge will incease raid score by this	

	--------------------------------------------------------------------------------------------------------------
	-- AIR AI
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.MAX_FUEL_CONSUMPTION_RATIO_FOR_AIR_TRAINING = 50

	NDefines.NAI.DAYS_BETWEEN_AIR_PRIORITIES_UPDATE = 2                              -- [4]    -- Amount of days between air ai updates priorities for air wings ( from 1 to N )
	NDefines.NAI.AIR_SCORE_DISTANCE_IMPACT = 0.5					-- Effect of distance applied to the score calculations
	NDefines.NAir.AI_ALLOWED_PLANES_KEPT_IN_RESERVE = 0.0								--AI allowed planes is reduced by this percentage. Overflow will be distributed to the next valid order. Worst case, this will result in this % of planes no being assigned any order.

	-------------------------
	-- Land combat
	-------------------------

	NDefines.NAI.LAND_COMBAT_OUR_COMBATS_AIR_IMPORTANCE = 1000		-- Strategic importance of our armies in the combats
	NDefines.NAI.LAND_COMBAT_FIGHTERS_PER_PLANE = 2
	NDefines.NAI.LAND_COMBAT_CAS_PER_COMBAT = 120
	NDefines.NAI.LAND_COMBAT_CAS_PER_ENEMY_ARMY = 60
	NDefines.NAI.LAND_COMBAT_ANTI_LOGISTICS_PER_ENEMY_ARMY = 0.10
	NDefines.NAI.FRONT_EVAL_UNIT_AIR_SUP_IMPACT = 2.0

	-------------------------
	-- Defense
	-------------------------

	NDefines.NAI.LAND_DEFENSE_FIGHERS_PER_PLANE = 3				-- Original = 2.2   Amount of air superiority planes requested per enemy plane
	NDefines.NAI.LAND_DEFENSE_INTERSEPTORS_PER_BOMBERS = 10		-- Original = 1 Amount of air interceptor planes requested per enemy bomber

	NDefines.NAI.LAND_DEFENSE_CIVIL_FACTORY_IMPORTANCE = 800 -- 50			-- Strategic importance of civil factories
	NDefines.NAI.LAND_DEFENSE_MILITARY_FACTORY_IMPORTANCE = 880 -- 70		-- Strategic importance of military factories
	NDefines.NAI.LAND_DEFENSE_NAVAL_FACTORY_IMPORTANCE = 420 -- 30			-- Strategic importance of naval factories
	NDefines.NAI.LAND_DEFENSE_SUPPLY_HUB_IMPORTANCE = 4             -- Strategic importance of supply hubs

	-------------------------
	-- Str bombing
	-------------------------

	NDefines.NAI.STR_BOMB_PLANES_PER_CIV_FACTORY = 200				-- Amount of planes requested per enemy civ factory
	NDefines.NAI.STR_BOMB_PLANES_PER_MIL_FACTORY = 205				-- Amount of planes requested per enemy military factory
	NDefines.NAI.STR_BOMB_PLANES_PER_NAV_FACTORY = 105				-- Amount of planes requested per enemy naval factory
	NDefines.NAI.STR_BOMB_PLANES_PER_SUPPLY_HUB = 30                 -- Amount of planes requested per enemy supply node
	NDefines.NAI.STR_BOMB_MIN_EXCORT_PLANES = 200					-- Min amount of planes requested to excort operations

	-------------------------
	-- Naval air
	-------------------------

	NDefines.NAI.NAVAL_SHIP_AIR_IMPORTANCE = 10000 --2.0					-- Naval ship air importance

	NDefines.NAI.NAVAL_IMPORTANCE_SCALE = 2 --0.65						-- Naval total importance scale (every naval score get's multiplied by it)

	NDefines.NAI.NAVAL_PATROL_PLANES_PER_SHIP_PATROLLING = 20 --10.0		-- Amount of naval patrol planes per ship on a patrol mission
	NDefines.NAI.NAVAL_PATROL_PLANES_PER_SHIP_RAIDING = 40 --10.0		-- Amount of naval patrol planes per ship on a convoy raid mission
	NDefines.NAI.NAVAL_PATROL_PLANES_PER_SHIP_ESCORTING = 20 --10.0		-- Amount of naval patrol planes per ship on a convoy escort mission

	--------------------------------------------------------------------------------------------------------------
	-- AMRS MARKET AI
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.EQUIPMENT_MARKET_MAX_CIVS_FOR_PURCHASES_RATIO = 0.2            -- Ratio of available civilian factories to max use for equipment purchases (0.2 = 20 %, so 50 available civs would mean max ca 10 civs to spend on purchases at any one time). Gets modified by equipment_market_spend_factories AI strategy.
	NDefines.NAI.EQUIPMENT_MARKET_NR_DELIVERIES_SOFT_MAX = 7                   -- AI tries to adjust assigned factories and amount of equipment to keep nr deliveries at max this

	--------------------------------------------------------------------------------------------------------------
	-- LEND LEASE AI
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.DIPLOMACY_LEND_LEASE_MONTHS_TO_CANCEL = 16
	NDefines.NAI.MINIMUM_EQUIPMENT_TO_ASK_LEND_LEASE = 1500
	NDefines.NAI.MINIMUM_CONVOY_TO_ASK_LEND_LEASE = 200

	NDefines.NAI.DIPLOMACY_ACCEPT_ATTACHE_OPINION_TRASHHOLD = 0

	----------- LEND LEASE

	NDefines.NAI.LENDLEASE_FRACTION_OF_PRODUCTION = 0.5									-- Base fraction AI would send as lendlease
	NDefines.NAI.LENDLEASE_FRACTION_OF_STOCKPILE = 0.75									-- Base fraction AI would send as lendlease

	NDefines.NAI.MINIMUM_FUEL_DAYS_TO_ASK_LEND_LEASE = 60								-- AI will accept to lend lease fuel only if the player have less fuel than this number multiply by his max daily consumption.
	NDefines.NAI.MINIMUM_FUEL_DAYS_TO_ACCEPT_LEND_LEASE = 60					 		-- AI will accept to lend lease fuel only if they have more fuel than this number multiply by their max daily consumption. Note that for a GiE asking to its host, we divide this number by 2.

	NDefines.NAI.PROPOSE_LEND_LEASE_AIDESIRE_SAME_IDEOLOGY 	= 50	-- Vanilla 40; Added to AI desire to propose lend lease if recipent is same ideology (and AI can't declare war on recipient)
	NDefines.NAI.PROPOSE_LEND_LEASE_AIDESIRE_SAME_IDEOLOGY_CIVIL_WAR = 50	-- Vanilla 25; Added to AI desire to propose lend lease if recipent is same ideology and they are currently in civil war
	NDefines.NAI.DIPLOMACY_LEND_LEASE_MONTHS_TO_CANCEL = 3
	--------------------------------------------------------------------------------------------------------------
	-- INTELLIGENCE AGENCY AI
	--------------------------------------------------------------------------------------------------------------

	-- Used by AI to pace the upgrades. 
	-- Formula : if( AGENCY_AI_BASE_NUM_FACTORIES <= num_civ_factories - num_upgrades * AGENCY_AI_PER_UPGRADE_FACTORIES )

	NDefines.NOperatives.AGENCY_AI_BASE_NUM_FACTORIES = 10.0 --25.0
	NDefines.NOperatives.AGENCY_AI_PER_UPGRADE_FACTORIES = 2.0 --6.0

	--------------------------------------------------------------------------------------------------------------
	-- AI SUPPLY/LOGISTICS DEFINES 
	--------------------------------------------------------------------------------------------------------------

	NDefines.NSupply.AI_FRONT_DIVISIONS_PER_SUPPLY_POINT = 0.85
	NDefines.NAI.MAX_DIST_PORT_RUSH = 40.0	--default 20.0			-- If a unit is in enemy territory with no supply it will consider nearby ports within this distance.

	NDefines.NAI.AVERAGE_SUPPLY_USE_PESSIMISM = 2.0  -- Increased multiplier to reflect realistic supply usage.

	NDefines.NAITheatre.AI_THEATRE_SUPPLY_CRISIS_LIMIT = 0.3	-- Vanilla 0.1; If a unit is standing in an area with this supply ratio it will try to escape	
	NDefines.NAITheatre.FRONT_EVAL_UNIT_SUPPLY_AND_ORG_LACK_IMPACT = 1.5	-- Vanilla 1.0; scale how painful the AI thinks a combined lack of supply and organization is for units	

	NDefines.NAI.MAX_SUPPLY_DIVISOR = 0.25  -- Vanilla 1.75						-- To make sure the AI does not overdeploy divisions. Higher number means more supply per unit. van 2.0

	--------------------------------------------------------------------------------------------------------------
	-- BITMODE AI CONCENTRATION TEST
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.GARRISON_FRACTION = 0.05					-- How large part of a front should always be holding the line rather than advancing at the enemy
	NDefines.NAI.RESERVE_TO_COMMITTED_BALANCE = 0.3 				                -- How many reserves compared to number of committed divisions in a combat (1.0 = as many as reserves as committed)

	NDefines.NAI.FRONT_BULGE_RATIO_UPPER_CUTOFF = 1.2				-- If total bulginess is lower than this, the front is ignored.
	NDefines.NAI.FRONT_BULGE_RATIO_LOWER_CUTOFF = 0.95				-- If local bulginess drops below this, a point of interest is found

	NDefines.NAI.PLAN_ACTIVATION_MAJOR_WEIGHT_FACTOR = 1
	NDefines.NAI.PLAN_ACTIVATION_PLAYER_WEIGHT_FACTOR = 1 	

	--------------------------------------------------------------------------------------------------------------
	-- BATTLEPLANNER AI (KILL ME)
	--------------------------------------------------------------------------------------------------------------

	NDefines.NMilitary.PLAN_PORVINCE_PORT_BASE_IMPORTANCE = 15.0	-- Vanilla 12.0		-- Added importance for area defense province with a port
	NDefines.NMilitary.PLAN_PORVINCE_PORT_LEVEL_FACTOR = 2.5	-- Vanilla 1.5			-- Bonus factor for port level

	NDefines.NMilitary.PLAN_PROVINCE_BASE_IMPORTANCE = 2.0	-- Vanilla 2.0

	NDefines.NMilitary.PLAN_PORVINCE_AIRFIELD_BASE_IMPORTANCE = 5.0 	-- Vanilla 3.0	-- Added importance for area defense province with air field
	NDefines.NMilitary.PLAN_PORVINCE_AIRFIELD_POPULATED_FACTOR = 2.0 	-- Vanilla 1.5	-- Bonus factor when an airfield has planes on it
	NDefines.NMilitary.PLAN_PORVINCE_AIRFIELD_LEVEL_FACTOR = 0.25		-- Bonus factor for airfield level
	NDefines.NMilitary.PLAN_PORVINCE_RESISTANCE_BASE_IMPORTANCE = 10.0 -- Used when calculating the calue of defense area provinces for the battle plan system (factored by resistance level)

	NDefines.NMilitary.PLAN_AREA_DEFENSE_ENEMY_UNIT_FACTOR = -1.0	-- Vanilla -2.0		-- Factor applied to province score in area defense order per enemy unit in that province
	NDefines.NMilitary.PLAN_AREA_DEFENSE_FORT_IMPORTANCE = 0.30		-- Vanilla 0.25		-- Used when calculating the calue of defense area provinces for the battle plan system, works as multipliers on the rest
	NDefines.NMilitary.PLAN_AREA_DEFENSE_COASTAL_FORT_IMPORTANCE = 5.0		-- Vanilla 3.0	-- Used when calculating the calue of defense area provinces for the battle plan system
	NDefines.NMilitary.PLAN_AREA_DEFENSE_COAST_NO_FORT_IMPORTANCE = 2.0		-- Vanilla 1.1	-- Used when calculating the calue of defense area provinces for the battle plan system

	NDefines.NMilitary.PLAN_STICKINESS_FACTOR = 95.0	-- Vanilla 100.0					-- downed from 100; Factor used in unitcontroller when prioritizing units for locations
	NDefines.NMilitary.PLAN_EXECUTE_CAREFUL_MAX_FORT = 4	-- Vanilla 5				-- reduced from 5 ; If execution mode is set to careful, units will not attack provinces with fort levels greater than or equal to this
		
	NDefines.NMilitary.PLAN_MAX_PROGRESS_TO_JOIN = 0.8		-- Vanilla 0.50; If Lower progress than this, probably needs support	
	NDefines.NMilitary.PLAN_SPREAD_ATTACK_WEIGHT = 0.9 	-- Vanilla 12.0; The higher the value, the less it should crowd provinces with multiple attacks.		#WICHTIG
	NDefines.NMilitary.PLAN_MIN_AUTOMATED_EMPTY_POCKET_SIZE = 20	-- Vanilla 2 -- The battle plan system will only automatically attack provinces in pockets that has no resistance and are no bigger than these many provinces
	NDefines.NMilitary.FRONTLINE_EXPANSION_FACTOR = 0.3 -- Vanilla 0.6,				-- When attacking along a frontline, how much should units spread out as they advance. 0.0 means head (more or less) directly to the drawn frontline, with no distractions

	NDefines.NMilitary.PLAYER_ORDER_PLANNING_DECAY = 0.01	-- 0.3; Amount of planning lost due to player manual order
	NDefines.NMilitary.FRONT_MIN_PATH_TO_REDEPLOY = 4   -- Vanilla 8,					-- If a units path is at least this long to reach its front location, it will strategically redeploy.
	NDefines.NMilitary.PLAN_ATTACK_DEPTH_FACTOR = 1.5   -- Vanilla 0.5; Increases the AI's willingness to exploit deeper territory, enabling potential encirclements.

	NDefines.NMilitary.PLAN_BLITZ_OPTIMISM = 0.4	-- Vanilla 0.2; Additional combat balance value in favor of blitzing side when considering targets (not a combat bonus, just offsets planning)
	NDefines.NMilitary.MIN_BALANCE_SCORE_TO_PROCEED_ATTACK = 0.3	-- Vanilla 0.2; A combat balance score of less than this will prevent auto attacking

	NDefines.NMilitary.PLAN_EXECUTE_CAREFUL_LIMIT = 15	-- Vanilla 25 ; When looking for an attach target, this score limit is required in the battle plan to consider province for attack
	NDefines.NMilitary.PLAN_EXECUTE_BALANCED_LIMIT = 0	-- Vanilla 0			-- When looking for an attach target, this score limit is required in the battle plan to consider province for attack
	NDefines.NMilitary.PLAN_EXECUTE_RUSH = -30	-- Vanilla -200					-- When looking for an attach target, this score limit is required in the battle plan to consider province for attack

	--------------------------------------------------------------------------------------------------------------
	-- UNIT ASSIGNMENT & FRONT MANAGEMENT
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.REVISITED_PROV_BOOST_FACTOR = 6   -- Vanilla 4 --When the AI picks units for a front, it prioritises units already nearby.	

	NDefines.NAI.REASSIGN_TO_ANOTHER_FRONT_IF_IN_COMBAT_FACTOR = 0.1 -- Vanilla 0.2	--Factor for reassigning to another front if in combat. 0.0 < X < 1.0 means reluctant, X > 1.0 means want to.
	NDefines.NAI.REASSIGN_TO_ANOTHER_FRONT_FACTOR = 0.3  -- Vanilla 0.5	--Factor for reassigning to another front. 0.0 < X < 1.0 means reluctant, X > 1.0 means want to.	

	--NDefines.NAI.LOW_PRIO_TEMPLATE_BONUS_FOR_GARRISONS = 2500	-- Vanilla 1000	--bonus to make ai more likely to assign low prio units to garrisons	
	--NDefines.NAI.LOW_PRIO_TEMPLATE_PENALTY_FOR_FRONTS = 1750	-- Vanilla 500  --penalty to make ai less likely to assign low prio units to fronts

	NDefines.NAI.FRONT_EVAL_UNIT_ACCURACY = 1.0	-- Vanilla 1.0										-- scale how stupid ai will act on fronts. 0 is potato
	NDefines.NAI.PLAN_VALUE_BONUS_FOR_MOVING_UNITS = 0.25	-- Vanilla 0.35  --AI plans gets a bonus when units are not moving and ready to fight

	NDefines.NAI.PLAN_FRONTUNIT_DISTANCE_FACTOR	= 8.5	-- Vanilla 10.0  --Factor for candidate units distance to front positions.
	NDefines.NAI.AI_PREFERRED_TACTIC_WEEKLY_CHANGE_CHANCE = 0.10	-- Vanilla 0.05	--Chance for AI to select a new preferred tactic if they don't have one selected

	NDefines.NAI.AREA_DEFENSE_BASE_IMPORTANCE = 25		-- Vanilla 30; Area defense order base importance value (used for determining order of troop selections)	
	NDefines.NAI.STATE_CONTROL_FOR_AREA_DEFENSE = 1.00		-- Vanilla 0.4; To avoid AI sending area defense to area with very little foothold	

	NDefines.NAI.NAVAL_STRIKE_PLANES_PER_SHIP = 100		-- Vanilla 20; Amount of bombers requested per enemy ship	

	NDefines.NAI.AGGRESSIVENESS_CHECK_BASE = 2  -- Vanilla 1.5                          -- front comparison where ai will consider aggressive stance, unless it is already then the number above is used
	NDefines.NAI.AGGRESSIVENESS_CHECK_EASY_TARGET = -0.5	-- Vanilla -0.3                   -- if target nation is flagged as easy target we also adjust down the front comparison needed
	NDefines.NAI.AGGRESSIVENESS_CHECK_CAREFUL = 1		-- Vanilla 0.6                            -- at what front strength balance do we go careful

	NDefines.NAI.FALLBACK_LOSING_FACTOR = 1.5	-- Vanilla 1.0; The lower this number, the longer the AI will hold the line before sending them to the fallback line	
	NDefines.NAI.PLAN_MIN_SIZE_FOR_FALLBACK	= 35	-- Vanilla 50; 	A country with less provinces than this will not draw fallback plans, but rather station their troops along the front

	--------------------------------------------------------------------------------------------------------------
	-- LEADER ASSIGNMENT
	--------------------------------------------------------------------------------------------------------------

	NDefines.NAI.ARMY_LEADER_ASSIGN_EMPTYNESS_MALUS	= 0.3	-- Vanilla 0.2 ---Factor for avoiding assigning leaders that can lead large armies to small armies (a value of 0.2 reduces the score by max 20 %)
	NDefines.NAI.ARMY_LEADER_ASSIGN_ARMY_ARMOR_SPEED_FACTOR	= 30.0	-- Vanilla 20.0 --Importance of general's ARMY_ARMOR_SPEED_FACTOR modifier (proportional to armor ratio in the army)	
	NDefines.NAI.ARMY_LEADER_ASSIGN_ARMY_ARMOR_ATTACK_FACTOR = 30.0		-- Vanilla 20.0 ---Importance of general's ARMY_ARMOR_ATTACK_FACTOR modifier (proportional to armor ratio in the army)	
	NDefines.NAI.ARMY_LEADER_ASSIGN_BOOST_ARMOR_SKILL = 25.0	-- Vanilla 20.0	---Importance of general's trait where armor skill is boosted, e.g. armor_officer which boosts panzer_leader (proportional to armor ratio in the army)	
	NDefines.NAI.ARMY_LEADER_ASSIGN_ARMOR_LEADER_IF_NO_ARMOR = -1.0		-- Vanilla -0.5   ---Avoid assigning a general with armor skills to an army with no armor (can be negative)
	NDefines.NAI.ARMY_LEADER_ASSIGN_AMPHIBIOUS_INVASION	= 6.0	 -- Vanilla 1.0 --If involved in invasion, importance of general's AMPHIBIOUS_INVASION modifier	
	NDefines.NAI.ARMY_LEADER_ASSIGN_NAVAL_INVASION_PREPARATION = 6.0	-- Vanilla 1.0 --If involved in invasion, importance of general's NAVAL_INVASION_PREPARATION modifier

	--------------------------------------------------------------------------------------------------------------
	-- AI FORCE CONCENTRATION DEFINES
	--------------------------------------------------------------------------------------------------------------

	-- AIFC stands for "AI Force Concentration". Using acronym to keep define names shorter.
	NDefines.NAI.AIFC_UPDATE_FREQUENCY_DAYS = 4 	-- Vanilla 5                             -- How often will AI run its AI force concentration logic. Lowering this number may decrease performance.
	NDefines.NAI.AIFC_FRESHNESS_BASE_VALUE = 40.0	-- Vanilla 45.0                           -- AIFC fronts have a "freshness value" which decreases if no progress is made. When it reaches zero, it will give up on the current target and try another.
	NDefines.NAI.AIFC_REFRESH_NEED_PER_DAY = 1.0                         -- Decrease freshness value with this every day.
	NDefines.NAI.AIFC_REFRESH_NEED_SUPPLY_FACTOR_PER_DAY = 1.5		-- Vanilla 0.8             -- Decrease freshness value with this multiplied by average supply ratio every day.
	NDefines.NAI.AIFC_FRESHNESS_ADD_ON_PROGRESS = 20.0  -- Vanilla 25.0                    -- Increase freshness value with this when we advance a province along the target path.
	NDefines.NAI.AIFC_UNIT_RATIO_BASE = 0.20	-- Vanilla 0.15                                -- After fulfilling minimum front unit needs, this ratio of the "extra"/desired units can be allocated to AI force concentration duty
	NDefines.NAI.AIFC_MAX_NR_FRONTS = 4                                     -- The X (this) fronts with highest AIFC score are considered for AI force concentration
	NDefines.NAI.AIFC_CA_DIVISIONS_PER_PROVINCE = 4		-- Vanilla 3                     -- AI will use this as a baseline of how many divisions to have per province
	NDefines.NAI.AIFC_ACTIVATE_AVG_ORG_RATIO_THRESHOLD = 0.25		-- Vanilla 0.2                -- Only activate the offensive order if average organisation is above this.
	NDefines.NAI.AIFC_ACTIVATE_IN_POSITION_RATIO_THRESHOLD = 0.35	-- Vanilla 0.3            -- Only activate the offensive order if divisions in position is more than this ratio.
	NDefines.NAI.AIFC_OFFENSIVE_DEACTIVATION_DAYS_THRESHOLD = 5             -- Deactivate the offensive order only if the conditions have been unfulfilled for this many days.
	NDefines.NAI.AIFC_UNIT_NUDGE_FREQUENCY_DAYS = 10	-- Vanilla 15                      -- On average every X day (randomly), check if another division (within same front) is better for AIFC based on score factors below.
	-- Unit offensiveness score factors for AIFC. Division stats are factored by this before adding up to total score.
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_BREAKTHROUGH = 12.0	-- Vanilla 11.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_SOFT_ATTACK = 6.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HARD_ATTACK = 8.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ARMOR = 30.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_PIERCING = 4.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HARDNESS = 300.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_SPEED = 15.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_INITIATIVE = 5.0
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ORGANISATION = 0.5	-- Vanilla 0.3
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HITPOINTS = 0.3
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_DEFENSE = -0.2
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ENTRENCHMENT = -0.5
	NDefines.NAI.AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_EXPERIENCE = 300.0
	-- End of unit offensiveness score factors for AIFC
	-- Strategic target scoring for AIFC
	NDefines.NAI.AIFC_TARGET_IGNORE_VP_THRESHOLD = 10                       -- VP target needs at leas this many victory points to be considered a target
	NDefines.NAI.AIFC_TARGET_SUPPLY_HUB_BASE_SCORE = 250	-- Vanilla 200                   -- Base score for supply hubs
	NDefines.NAI.AIFC_TARGET_NAVAL_BASE_BASE_SCORE = 10.0                   -- Base score for naval bases
	NDefines.NAI.AIFC_TARGET_NAVAL_BASE_SCORE_PER_LEVEL = 1.0               -- Score for naval bases increases by this for each level
	NDefines.NAI.AIFC_TARGET_VP_SCORE_FACTOR = 1.0                          -- Score for VPs increases by this for every victory point
	NDefines.NAI.AIFC_TARGET_CAPITAL_SCORE_EXTRA = 10.0		-- Vanilla 5.0                   -- Extra score for Capitals (in addition to VP score)
	NDefines.NAI.AIFC_TARGET_SHORT_PATH_PENALTY_FACTOR = 0.1                -- Penalty factor for short AIFC paths (path <= 3 (including own start province))
	NDefines.NAI.AIFC_TARGET_PERSISTED_FACTOR = 35.0   		-- Vanilla 30.0                     -- Bonus factor for persisted targets (used to incentivize AI to select target again after e.g. front lines have reformed or save file is loaded)
	-- End of strategic target scoring for AIFC
	-- Offensive path scoring (cost multipliers) for AIFC
	NDefines.NAI.AIFC_PATH_MAX_COST = 5.0	-- Vanilla 7.0                                  -- Only allow paths with total cost <= this. WARNING: increasing this value may cause stuttering and other performance issues (since AIFC will evaluate larger areas)
	NDefines.NAI.AIFC_PATH_COST_ADJ_NORMAL = 1.0
	NDefines.NAI.AIFC_PATH_COST_ADJ_STRAIT = 4.0
	NDefines.NAI.AIFC_PATH_COST_ADJ_RIVER = 2.0
	NDefines.NAI.AIFC_PATH_COST_ADJ_RIVER_LARGE = 3.0
	NDefines.NAI.AIFC_PATH_COST_TRN_MOUNTAINS = 3.0		-- Vanilla 2.0
	NDefines.NAI.AIFC_PATH_COST_TRN_FOREST = 1.5
	NDefines.NAI.AIFC_PATH_COST_TRN_DESERT = 1.5
	NDefines.NAI.AIFC_PATH_COST_TRN_HILLS = 1.2
	NDefines.NAI.AIFC_PATH_COST_TRN_JUNGLE = 3.5 		-- Vanilla 3.0
	NDefines.NAI.AIFC_PATH_COST_TRN_PLAINS = 0.6		-- Vanilla 0.8
	NDefines.NAI.AIFC_PATH_COST_TRN_URBAN = 1.0
	NDefines.NAI.AIFC_PATH_COST_TRN_MARSH = 3.0
	NDefines.NAI.AIFC_PATH_COST_PER_FORT_LEVEL = 0.3                        -- This multiplier is calculated as: 1.0 + <define>*fort_level    (only for fort levels > 0)
	NDefines.NAI.AIFC_PATH_COST_HAS_SUPPLY_HUB = 0.25	-- Vanilla 0.5                        -- If the province we're entering has a supply hub
	NDefines.NAI.AIFC_PATH_COST_HAS_NAVAL_BASE = 0.25	-- Vanilla 0.5                         -- If the province we're entering has a naval base
	NDefines.NAI.AIFC_PATH_COST_RAILWAY_CONNECTION = 0.6	-- Vanilla 0.75                  -- If the provinces are connected by a railway with level > 0
	-- End of offensive path scoring for AIFC

-- RealisticArmsProduction Defines
	NDefines.NProduction.BASE_FACTORY_SPEED_MIL = 9
	NDefines.NProduction.BASE_FACTORY_SPEED_NAV = 5

	NDefines.NMilitary.UNIT_UPKEEP_ATTRITION = 0.03 							--Constant attrition value applied to armies.


	NDefines.NProduction.MAX_CIV_FACTORIES_PER_LINE = 10

	NDefines.NAir.FUEL_COST_MULT = 0.175
	NDefines.NMilitary.ARMY_FUEL_COST_MULT = 0.25
	NDefines.NNavy.FUEL_COST_MULT = 0.05

-- Ten Support Companies Defines
	NDefines.NMilitary.MAX_DIVISION_SUPPORT_WIDTH = 2;

-- tallEIS Defines
	NDefines.NMilitary.NEW_OPERATIVE_RANDOM_PERSONALITY_TRAIT_CHANCES = {  			-- chances to gain a personality trait for new operatives
			0.6, -- up from vanilla 50% for first trait
			0.2  -- up from vanilla 10% for second trait after that
		}
		
	NDefines.NMilitary.NEW_OPERATIVE_RANDOM_BASIC_TRAIT_CHANCES = {  				-- chances to gain a basic trait for new operatives
			0.35, -- up from vanilla 25% for first trait
			0.15  -- up from vanilla 5% for second trait after that
		}
		
	NDefines.NOperatives.AGENCY_UPGRADE_PER_OPERATIVE_SLOT = 4							-- (normaly 5) Number of upgrade needed to unlock an additional operative slot
	NDefines.NOperatives.MAX_OPERATIVE_SLOT_FROM_AGENCY_UPGRADES = 8					-- (normaly 1, Adjusted down from 8 after NSB DLC) max operative slots gained from upgrades
	NDefines.NOperatives.INTEL_NETWORK_GAIN_RATE_ON_WRONG_CONTROLLER = -9.8				-- (normaly -10.0) Amount of network strength lost in a state when it does not have the right controller anymore
	NDefines.NOperatives.INTEL_NETWORK_GAIN_RATE_ON_OUT_OF_RANGE = -1.57				-- (normaly -1.75) Amount of network strength lost in a state that has the right controller but is out of range of any operative
				--may come back to below, but makes much more of a diffrence than i thaught
			--NDefines.NOperatives.INTEL_NETWORK_MIN_VP_TO_TARGET = 10,					-- (normaly 15) The minimum value of the highest VP in a state to consider the state as a valid target to start building an intel network

	NDefines.NOperatives.INTEL_NETWORK_OPERATIVE_GAIN_STACKING_FACTOR = 0.6				-- (normaly 0.5) When multiple operative are present in the same location, this factor is applied for each operative with a lower gain than the max. So if operatives have the gain [ 3, 1, 2 ] in the same location, it is sorted to [ 1, 2, 3 ] then converted to [ 1*D^2, 2*D^1, 3 ], with D being this define, so if D=0.5 we have [ 0.25, 1, 3 ] and the final gain from operative at this location will be 4.25. Putting this define to 0 is equivalent to considering the maximum value only.
	NDefines.NOperatives.BUILD_INTEL_NETWORK_DAILY_XP_GAIN = 1.112						-- (normaly 1.0) 
	NDefines.NOperatives.QUIET_INTEL_NETWORK_DAILY_XP_GAIN = 0.112						-- (normaly 0.0)

		-- used for calculating how many operatives will a spy master gain from its faction members
		-- first number in every now is number of operatives gained
		-- second number is total factory needed (mil and civ) for giving previous ratio
		-- NORMAL BELOW
		--0.0, 		0.0, 	-- 0 operative for [0, 10)
		--0.25,  	10.0,	-- 0.25 operative for [10, 50)
		--0.5, 		50.0,	-- 0.5 operative for >= 50

	NDefines.NOperatives.OPERATIVE_SLOTS_FROM_FACTION_MEMBERS_FOR_SPY_MASTER = {
		--below ammounts reduced by ~20% after NSB DLC
			0.0, 	0.0, -- 0 operative for [0, 5)
			0.08,  	5.0, -- 0.08 operative for [5, 10)
			0.2, 	10.0, -- 0.2 operative for [10, 25)
			0.4,  	25.0, -- 0.4 operative for [25, 50)
			0.6,  	50.0, -- 0.6 operative for [50, 75)
			0.8,  	75.0, -- 0.8 operative for [75, 100)
			1.0,  	100.0, -- 1.0 operative for >= 100
		}
		
	NDefines.NOperatives.OPERATIVE_BASE_INTEL_NETWORK_GAIN = 0.32				-- (normaly 0.4) Base amount of network strength gain per day provided by an operative
	NDefines.NOperatives.COUNTER_INTELLIGENCE_STACKING_FACTOR = 0.6				-- (normaly 0.5) Multiplier applied to each operative after the first one. So if we have the following counter intelligence rating values [ 0.1, 0.3, 0.2 ], the factor is applied twice for the lowest value and once for the 2nd lowest one as such : [ 0.3, 0.2 * D, 0.1 * D * D ] and then the result is summed up to give the final rating value
	NDefines.NOperatives.COUNTER_INTELLIGENCE_DAILY_XP_GAIN = 0.134			-- (normaly 0.112)

	NDefines.NOperatives.BOOST_IDEOLOGY_MAX_DRIFT_BY_OPERATIVE = 0.2			-- (normaly 0.25) the maximum drift an operative can cause, a negative value means no maximum
	NDefines.NOperatives.BOOST_IDEOLOGY_DRIFT_STACKING_FACTOR = 0.6				-- (Normaly 0.5) multiplied to the drift of an operative for each operative after the first one, with the greatest drift. So if we have the following drift values [ 0.1, 0.3, 0.2 ], the factor is applied twice for the lowest value and once for the 2nd lowest one as such : [ 0.3, 0.2 * D, 0.1 * D * D ] and then the result is summed up to give the final drift value.
	NDefines.NOperatives.BOOST_IDEOLOGY_DAILY_XP_GAIN = 0.3						-- (normaly 0.274)
	NDefines.NOperatives.OPERATIVE_BASE_BOOST_IDEOLOGY = 0.08					-- (normaly 0.1) Base amount of daily ideology drift provoked by an operative
	NDefines.NOperatives.OPERATIVE_BASE_PROPAGANDA_POWER = 0.0004				-- (normaly 0.0005) Base amount of daily war support and stability change when an operative is assigned to propaganda
	NDefines.NOperatives.PROPAGANDA_OPERATIVE_STACKING_FACTOR = 0.6				-- (normaly 0.5) Multiplied to the Stability/WarSupport drift values of each operative after the one with the greatest values. The process is done separatly for Stability and WarSupport
				--no change made, but kept in case i change my mind
			--NDefines.NOperatives.PROPAGANDA_COUNTRY_STACKING_FACTOR = 0.5,			-- Multiplied to the Stability/WarSupport drift values of each country after the one with the greatest values. The process is done separatly for Stability and WarSupport
	NDefines.NOperatives.PROPAGANDA_DAILY_XP_GAIN = 0.420						-- (normaly 0.35
				--no change made, but kept in case i change my mind
			--NDefines.NOperatives.OPERATIVE_BASE_ROOT_OUT_RESISTANCE_EFFICIENCY = 1.0,	-- The base efficiency of an operative at the RootOutResistance mission (this is a percentage, 1.0 == 100%)
	NDefines.NOperatives.OPERATIVE_BASE_ROOT_OUT_RESISTANCE_EFFICIENCY = 0.9	-- (normaly 1.0) The base efficiency of an operative at the RootOutResistance mission (this is a percentage, 1.0 == 100%)
	NDefines.NOperatives.ROOT_OUT_RESISTANCE_STACKING_FACTOR = 0.6				-- (normaly 0.5) Multiplied to each operative efficiency after the first one
	NDefines.NOperatives.ROOT_OUT_RESISTANCE_RANGE_STEP_FACTOR = 0.6			-- (normaly 0.5) Multiplied to the summed up efficiency from all operative operating in a same state to determine the efficiency in neighboring states
	NDefines.NOperatives.ROOT_OUT_RESISTANCE_DAILY_XP_GAIN = 0.08				-- (normaly 0.068)
	NDefines.NOperatives.OPERATIVE_BASE_CONTROL_TRADE_DRIFT = 0.4				-- (normaly 0.5) The base daily drift in trade influence caused by an operative
	NDefines.NOperatives.CONTROL_TRADE_STACKING_FACTOR = 0.6					-- (normaly 0.6) Multiplied to the drift of each operative after the first one
	NDefines.NOperatives.CONTROL_TRADE_DAILY_XP_GAIN = 0.164					-- (normaly 0.137)

	NDefines.NOperatives.DIPLOMATIC_PRESSURE_OPERATIVE_STACKING_FACTOR = 0.6	-- (normaly 0.5) The diminishing return factor to apply to operative working for the same faction after the first one. Operatives operating for a same faction are ranked by their efficiency and their opinion and tension drift are individually applyied a stacking factor like so: DRIFT * STACKING_FACTOR^RANK where RANK is a value from 0 to the number of operative -1 where the opperative with the highest drift value has rank 0
	NDefines.NOperatives.DIPLOMATIC_PRESSURE_DAILY_XP_GAIN = 0.164				-- (Normaly 0.137)
				--adjusted down from 16 after the NSB DLC, large numbers reported as unbalenced in multiplayer
			--NDefines.NOperatives.MAX_RECRUITED_OPERATIVES = 10				-- (Normaly 10)
		
	NDefines.NOperatives.OPERATION_COMPLETION_XP = 24							-- (normaly 18)

	NDefines.NOperatives.ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_XP_GAIN = 120	-- (normaly 100) Xp gain when an enemy operative is captured in the country the operative is assigned to counter intelligence to. Apply to a single randomly selected operative
			--NDefines.NOperatives.TECH_STEAL_EQUIPMENT_FACTOR = 4						-- (normaly 4) there is some suspicion that this notation is partly responsable for some of the unbalance related too 'Steal Blueprint' missions.  included here in case testing is needed later
			--NDefines.NOperatives.TECH_STEAL_YEAR_FACTOR = 4								-- (normaly 4) there is some suspicion that this notation is partly responsable for some of the unbalance related too 'Steal Blueprint' missions.  included here in case testing is needed later
	    
	NDefines.NIntel.RECON_PLANE_INTEL_BASE = 0.03								-- (normaly 0.02) intel base amount for a strategic area per plane

	NDefines.NIntel.DYNAMIC_INTEL_SOURCE_AIR_RECON_MAXIMUMS = { 30, 25, 35, 25 }-- (normaly 25, 20, 30, 20)

	NDefines.NIntel.INTEL_NETWORK_NATIONAL_COVERAGE_FACTOR = 2.5				-- (normaly 2.0)
	NDefines.NIntel.INTEL_NETWORK_MAX_CIVILIAN_INTEL = 25.0						-- (normaly 20.0)
	NDefines.NIntel.INTEL_NETWORK_MAX_ARMY_INTEL = 25.0							-- (normaly 20.0)
	NDefines.NIntel.INTEL_NETWORK_MAX_NAVY_INTEL = 30.0							-- (normaly 25.0)
	NDefines.NIntel.INTEL_NETWORK_MAX_AIRFORCE_INTEL = 20.0						-- (normaly 15.0)

	NDefines.NIntel.RADAR_LEVEL_INTEL_FACTOR = 1.5								-- (normaly 1.25) Multiplied to the radar level to tell the fraction of intel per covered province we get. The radar level is computed as BuildingLevel / MaxBuildingLevel.
	NDefines.NIntel.RADAR_INTEL_STACKING_FACTOR = 0.6							-- (Normaly 0.5) Used when multiple radars cover the same province

-- BM Medals Defines
	NDefines.NMilitary.PROMOTE_LEADER_CP_COST = 20.0
	NDefines.NMilitary.UNIT_LEADER_TRAIT_SLOT_PER_LEVEL = { 0.5, 0.65, 0.6, 0.0 }
	NDefines.NMilitary.UNIT_LEADER_ASSIGN_TRAIT_COST = 5.0
	NDefines.NMilitary.COST_INCREASE_PER_ACTIVE_MEDAL = 0.20